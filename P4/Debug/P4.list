
P4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b4  080036b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080036b4  080036b4  000136b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036bc  080036bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036bc  080036bc  000136bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000068  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006325  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013cc  00000000  00000000  000263c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004c8  00000000  00000000  00027798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000420  00000000  00000000  00027c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020938  00000000  00000000  00028080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005950  00000000  00000000  000489b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1570  00000000  00000000  0004e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010f878  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bec  00000000  00000000  0010f8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003540 	.word	0x08003540

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003540 	.word	0x08003540

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000daa:	f000 fbad 	bl	8001508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dae:	f000 f971 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db2:	f000 f9d9 	bl	8001168 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  uint8_t button_count=0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	74fb      	strb	r3, [r7, #19]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(repeticion<1)
 8000dba:	4bad      	ldr	r3, [pc, #692]	; (8001070 <main+0x2cc>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	dcfb      	bgt.n	8000dba <main+0x16>
	  {

	  //Bucle for para obtener 5 medidas:
	  int num=5;
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	60fb      	str	r3, [r7, #12]
	  for(int j=0;j<num;j++){
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	e120      	b.n	800100e <main+0x26a>
	  //Deshabilito interrupciones hasta que se encienda el LED
	  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000dcc:	2006      	movs	r0, #6
 8000dce:	f000 fd5a 	bl	8001886 <HAL_NVIC_DisableIRQ>
	  //tiempo de espera máximo en milisegundos
	  int N=4000;
 8000dd2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000dd6:	60bb      	str	r3, [r7, #8]
	  //tiempo de espera mínimo en milisegundos
	  int M=2000;
 8000dd8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ddc:	607b      	str	r3, [r7, #4]
	  contador=0;
 8000dde:	4ba5      	ldr	r3, [pc, #660]	; (8001074 <main+0x2d0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
	  button_int=0;
 8000de4:	4ba4      	ldr	r3, [pc, #656]	; (8001078 <main+0x2d4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
	  button_count=0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	74fb      	strb	r3, [r7, #19]
	  //Creo animación, se encienden todos los LEDS y se apagan en orden
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df4:	48a1      	ldr	r0, [pc, #644]	; (800107c <main+0x2d8>)
 8000df6:	f000 fefd 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e00:	489e      	ldr	r0, [pc, #632]	; (800107c <main+0x2d8>)
 8000e02:	f000 fef7 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e0c:	489b      	ldr	r0, [pc, #620]	; (800107c <main+0x2d8>)
 8000e0e:	f000 fef1 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e18:	4898      	ldr	r0, [pc, #608]	; (800107c <main+0x2d8>)
 8000e1a:	f000 feeb 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000e1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e22:	f000 fbe3 	bl	80015ec <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e2c:	4893      	ldr	r0, [pc, #588]	; (800107c <main+0x2d8>)
 8000e2e:	f000 fee1 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000e32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e36:	f000 fbd9 	bl	80015ec <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e40:	488e      	ldr	r0, [pc, #568]	; (800107c <main+0x2d8>)
 8000e42:	f000 fed7 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000e46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e4a:	f000 fbcf 	bl	80015ec <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e54:	4889      	ldr	r0, [pc, #548]	; (800107c <main+0x2d8>)
 8000e56:	f000 fecd 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000e5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5e:	f000 fbc5 	bl	80015ec <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e68:	4884      	ldr	r0, [pc, #528]	; (800107c <main+0x2d8>)
 8000e6a:	f000 fec3 	bl	8001bf4 <HAL_GPIO_WritePin>
	  //genero tiempo de espera random y espero
	  t_disparo = rand () % (N-M+1) + M;
 8000e6e:	f001 fb65 	bl	800253c <rand>
 8000e72:	4602      	mov	r2, r0
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	1acb      	subs	r3, r1, r3
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	fb92 f1f3 	sdiv	r1, r2, r3
 8000e80:	fb03 f301 	mul.w	r3, r3, r1
 8000e84:	1ad2      	subs	r2, r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a7d      	ldr	r2, [pc, #500]	; (8001080 <main+0x2dc>)
 8000e8c:	6013      	str	r3, [r2, #0]
	  // HAL_Delay(t_disparo);
	  //Si quiero encender los leds mientras se produce la espera:
	  uint32_t tickstart = HAL_GetTick();
 8000e8e:	f000 fba1 	bl	80015d4 <HAL_GetTick>
 8000e92:	6038      	str	r0, [r7, #0]
	  while((HAL_GetTick() - tickstart) < t_disparo)
 8000e94:	e004      	b.n	8000ea0 <main+0xfc>
	  {
	  //Código leds
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4878      	ldr	r0, [pc, #480]	; (800107c <main+0x2d8>)
 8000e9c:	f000 feaa 	bl	8001bf4 <HAL_GPIO_WritePin>
	  while((HAL_GetTick() - tickstart) < t_disparo)
 8000ea0:	f000 fb98 	bl	80015d4 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	4a75      	ldr	r2, [pc, #468]	; (8001080 <main+0x2dc>)
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d3f1      	bcc.n	8000e96 <main+0xf2>
	  }
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	4871      	ldr	r0, [pc, #452]	; (800107c <main+0x2d8>)
 8000eb8:	f000 fe9c 	bl	8001bf4 <HAL_GPIO_WritePin>
	  //Enciendo los LEDS
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec2:	486e      	ldr	r0, [pc, #440]	; (800107c <main+0x2d8>)
 8000ec4:	f000 fe96 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ece:	486b      	ldr	r0, [pc, #428]	; (800107c <main+0x2d8>)
 8000ed0:	f000 fe90 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eda:	4868      	ldr	r0, [pc, #416]	; (800107c <main+0x2d8>)
 8000edc:	f000 fe8a 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee6:	4865      	ldr	r0, [pc, #404]	; (800107c <main+0x2d8>)
 8000ee8:	f000 fe84 	bl	8001bf4 <HAL_GPIO_WritePin>
	  //Habilito interrupciones
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000eec:	2006      	movs	r0, #6
 8000eee:	f000 fcbc 	bl	800186a <HAL_NVIC_EnableIRQ>
	  //Guardo el primer tick
	  primertick=HAL_GetTick();
 8000ef2:	f000 fb6f 	bl	80015d4 <HAL_GetTick>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a62      	ldr	r2, [pc, #392]	; (8001084 <main+0x2e0>)
 8000efa:	6013      	str	r3, [r2, #0]
	  //Sin Antirrebotes
	  while (button_int==0){
 8000efc:	e007      	b.n	8000f0e <main+0x16a>
	    contador=HAL_GetTick()-primertick;
 8000efe:	f000 fb69 	bl	80015d4 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	4b5f      	ldr	r3, [pc, #380]	; (8001084 <main+0x2e0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	4a5a      	ldr	r2, [pc, #360]	; (8001074 <main+0x2d0>)
 8000f0c:	6013      	str	r3, [r2, #0]
	  while (button_int==0){
 8000f0e:	4b5a      	ldr	r3, [pc, #360]	; (8001078 <main+0x2d4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f3      	beq.n	8000efe <main+0x15a>
	  }
	  }
	  */

	  //Si el contador es 0, significa que el usuario ha apretado el botón antes de tiempo, realizo un parpadeo de LEDS:
	  if(contador==0){
 8000f16:	4b57      	ldr	r3, [pc, #348]	; (8001074 <main+0x2d0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d142      	bne.n	8000fa4 <main+0x200>
		  for(int i=0;i<15;i++){
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	e038      	b.n	8000f96 <main+0x1f2>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2a:	4854      	ldr	r0, [pc, #336]	; (800107c <main+0x2d8>)
 8000f2c:	f000 fe62 	bl	8001bf4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f36:	4851      	ldr	r0, [pc, #324]	; (800107c <main+0x2d8>)
 8000f38:	f000 fe5c 	bl	8001bf4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f42:	484e      	ldr	r0, [pc, #312]	; (800107c <main+0x2d8>)
 8000f44:	f000 fe56 	bl	8001bf4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f4e:	484b      	ldr	r0, [pc, #300]	; (800107c <main+0x2d8>)
 8000f50:	f000 fe50 	bl	8001bf4 <HAL_GPIO_WritePin>
		  HAL_Delay(150);
 8000f54:	2096      	movs	r0, #150	; 0x96
 8000f56:	f000 fb49 	bl	80015ec <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f60:	4846      	ldr	r0, [pc, #280]	; (800107c <main+0x2d8>)
 8000f62:	f000 fe47 	bl	8001bf4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6c:	4843      	ldr	r0, [pc, #268]	; (800107c <main+0x2d8>)
 8000f6e:	f000 fe41 	bl	8001bf4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f78:	4840      	ldr	r0, [pc, #256]	; (800107c <main+0x2d8>)
 8000f7a:	f000 fe3b 	bl	8001bf4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f84:	483d      	ldr	r0, [pc, #244]	; (800107c <main+0x2d8>)
 8000f86:	f000 fe35 	bl	8001bf4 <HAL_GPIO_WritePin>
		  HAL_Delay(150);
 8000f8a:	2096      	movs	r0, #150	; 0x96
 8000f8c:	f000 fb2e 	bl	80015ec <HAL_Delay>
		  for(int i=0;i<15;i++){
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	3301      	adds	r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	2b0e      	cmp	r3, #14
 8000f9a:	ddc3      	ble.n	8000f24 <main+0x180>
	  }
		  //Tiempo de reaccion no valido, se repetirá la medida:
		  j--;
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	e015      	b.n	8000fd0 <main+0x22c>
	  }else{
		  //Se calcula el tiempo de reacción
		  t_reaccion[j]=contador/1000.0;
 8000fa4:	4b33      	ldr	r3, [pc, #204]	; (8001074 <main+0x2d0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff faa3 	bl	80004f4 <__aeabi_ui2d>
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <main+0x2e4>)
 8000fb4:	f7ff fc42 	bl	800083c <__aeabi_ddiv>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f7ff fd24 	bl	8000a0c <__aeabi_d2f>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	4931      	ldr	r1, [pc, #196]	; (800108c <main+0x2e8>)
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	601a      	str	r2, [r3, #0]
	  }

	  //Se apagan los LEDS y se esperan 2 segs
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd6:	4829      	ldr	r0, [pc, #164]	; (800107c <main+0x2d8>)
 8000fd8:	f000 fe0c 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe2:	4826      	ldr	r0, [pc, #152]	; (800107c <main+0x2d8>)
 8000fe4:	f000 fe06 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fee:	4823      	ldr	r0, [pc, #140]	; (800107c <main+0x2d8>)
 8000ff0:	f000 fe00 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffa:	4820      	ldr	r0, [pc, #128]	; (800107c <main+0x2d8>)
 8000ffc:	f000 fdfa 	bl	8001bf4 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 8001000:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001004:	f000 faf2 	bl	80015ec <HAL_Delay>
	  for(int j=0;j<num;j++){
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	3301      	adds	r3, #1
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	429a      	cmp	r2, r3
 8001014:	f6ff aeda 	blt.w	8000dcc <main+0x28>
	  }
	  //Calculo tiempo reaccion medio
	  for(int j=0; j<num;j++){
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e010      	b.n	8001040 <main+0x29c>
		  t_reaccion_medio = t_reaccion_medio + t_reaccion[j];
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <main+0x2e8>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	ed93 7a00 	vldr	s14, [r3]
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <main+0x2ec>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <main+0x2ec>)
 8001036:	edc3 7a00 	vstr	s15, [r3]
	  for(int j=0; j<num;j++){
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbea      	blt.n	800101e <main+0x27a>
	  }
	  t_reaccion_medio = t_reaccion_medio/num;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <main+0x2ec>)
 800104a:	edd3 6a00 	vldr	s13, [r3]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <main+0x2ec>)
 800105e:	edc3 7a00 	vstr	s15, [r3]
	  repeticion++;
 8001062:	4b03      	ldr	r3, [pc, #12]	; (8001070 <main+0x2cc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	4a01      	ldr	r2, [pc, #4]	; (8001070 <main+0x2cc>)
 800106a:	6013      	str	r3, [r2, #0]
	  if(repeticion<1)
 800106c:	e6a5      	b.n	8000dba <main+0x16>
 800106e:	bf00      	nop
 8001070:	20000094 	.word	0x20000094
 8001074:	200000ac 	.word	0x200000ac
 8001078:	2000008c 	.word	0x2000008c
 800107c:	40020c00 	.word	0x40020c00
 8001080:	20000090 	.word	0x20000090
 8001084:	200000a8 	.word	0x200000a8
 8001088:	408f4000 	.word	0x408f4000
 800108c:	200000b0 	.word	0x200000b0
 8001090:	20000098 	.word	0x20000098

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	; 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	2230      	movs	r2, #48	; 0x30
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fa42 	bl	800252c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <SystemClock_Config+0xcc>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	4a27      	ldr	r2, [pc, #156]	; (8001160 <SystemClock_Config+0xcc>)
 80010c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	4b25      	ldr	r3, [pc, #148]	; (8001160 <SystemClock_Config+0xcc>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <SystemClock_Config+0xd0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a21      	ldr	r2, [pc, #132]	; (8001164 <SystemClock_Config+0xd0>)
 80010de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <SystemClock_Config+0xd0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f0:	2302      	movs	r3, #2
 80010f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f8:	2310      	movs	r3, #16
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fc:	2302      	movs	r3, #2
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001100:	2300      	movs	r3, #0
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001104:	2308      	movs	r3, #8
 8001106:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001108:	2332      	movs	r3, #50	; 0x32
 800110a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800110c:	2304      	movs	r3, #4
 800110e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001110:	2307      	movs	r3, #7
 8001112:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fd9d 	bl	8001c58 <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001124:	f000 f890 	bl	8001248 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112c:	2302      	movs	r3, #2
 800112e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001134:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001138:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800113a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800113e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fffe 	bl	8002148 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001152:	f000 f879 	bl	8001248 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3750      	adds	r7, #80	; 0x50
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <MX_GPIO_Init+0xac>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a23      	ldr	r2, [pc, #140]	; (8001214 <MX_GPIO_Init+0xac>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <MX_GPIO_Init+0xac>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_GPIO_Init+0xac>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <MX_GPIO_Init+0xac>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_GPIO_Init+0xac>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80011b6:	2200      	movs	r2, #0
 80011b8:	f24f 0120 	movw	r1, #61472	; 0xf020
 80011bc:	4816      	ldr	r0, [pc, #88]	; (8001218 <MX_GPIO_Init+0xb0>)
 80011be:	f000 fd19 	bl	8001bf4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c2:	2301      	movs	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	4619      	mov	r1, r3
 80011d6:	4811      	ldr	r0, [pc, #68]	; (800121c <MX_GPIO_Init+0xb4>)
 80011d8:	f000 fb70 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80011dc:	f24f 0320 	movw	r3, #61472	; 0xf020
 80011e0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	4808      	ldr	r0, [pc, #32]	; (8001218 <MX_GPIO_Init+0xb0>)
 80011f6:	f000 fb61 	bl	80018bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2006      	movs	r0, #6
 8001200:	f000 fb17 	bl	8001832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001204:	2006      	movs	r0, #6
 8001206:	f000 fb30 	bl	800186a <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40020000 	.word	0x40020000

08001220 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==GPIO_PIN_0){
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d102      	bne.n	8001236 <HAL_GPIO_EXTI_Callback+0x16>
		button_int=1;
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <HAL_GPIO_EXTI_Callback+0x24>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
	}
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	2000008c 	.word	0x2000008c

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001292:	2007      	movs	r0, #7
 8001294:	f000 fac2 	bl	800181c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <NMI_Handler+0x4>

080012aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <MemManage_Handler+0x4>

080012b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f0:	f000 f95c 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012fc:	2001      	movs	r0, #1
 80012fe:	f000 fc93 	bl	8001c28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}

08001306 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
	return 1;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_kill>:

int _kill(int pid, int sig)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001320:	f001 f8da 	bl	80024d8 <__errno>
 8001324:	4603      	mov	r3, r0
 8001326:	2216      	movs	r2, #22
 8001328:	601a      	str	r2, [r3, #0]
	return -1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_exit>:

void _exit (int status)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800133e:	f04f 31ff 	mov.w	r1, #4294967295
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffe7 	bl	8001316 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001348:	e7fe      	b.n	8001348 <_exit+0x12>

0800134a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	e00a      	b.n	8001372 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800135c:	f3af 8000 	nop.w
 8001360:	4601      	mov	r1, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	60ba      	str	r2, [r7, #8]
 8001368:	b2ca      	uxtb	r2, r1
 800136a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	dbf0      	blt.n	800135c <_read+0x12>
	}

return len;
 800137a:	687b      	ldr	r3, [r7, #4]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	e009      	b.n	80013aa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	60ba      	str	r2, [r7, #8]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dbf1      	blt.n	8001396 <_write+0x12>
	}
	return len;
 80013b2:	687b      	ldr	r3, [r7, #4]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_close>:

int _close(int file)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	return -1;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e4:	605a      	str	r2, [r3, #4]
	return 0;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_isatty>:

int _isatty(int file)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	return 1;
 80013fc:	2301      	movs	r3, #1
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
	return 0;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f001 f840 	bl	80024d8 <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20020000 	.word	0x20020000
 8001484:	00000400 	.word	0x00000400
 8001488:	2000009c 	.word	0x2000009c
 800148c:	200000d8 	.word	0x200000d8

08001490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ba:	490e      	ldr	r1, [pc, #56]	; (80014f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014d0:	4c0b      	ldr	r4, [pc, #44]	; (8001500 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014de:	f7ff ffd7 	bl	8001490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e2:	f000 ffff 	bl	80024e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e6:	f7ff fc5d 	bl	8000da4 <main>
  bx  lr    
 80014ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014f8:	080036c4 	.word	0x080036c4
  ldr r2, =_sbss
 80014fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001500:	200000d8 	.word	0x200000d8

08001504 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC_IRQHandler>
	...

08001508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <HAL_Init+0x40>)
 8001512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_Init+0x40>)
 800151e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_Init+0x40>)
 800152a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f973 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	2000      	movs	r0, #0
 8001538:	f000 f808 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff fe8a 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023c00 	.word	0x40023c00

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x54>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x58>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f999 	bl	80018a2 <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f000 f953 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_InitTick+0x5c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008
 80015d0:	200000c4 	.word	0x200000c4

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200000c4 	.word	0x200000c4

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff ffee 	bl	80015d4 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_Delay+0x44>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffde 	bl	80015d4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000008 	.word	0x20000008

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db12      	blt.n	800170c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	490a      	ldr	r1, [pc, #40]	; (8001718 <__NVIC_DisableIRQ+0x44>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	3320      	adds	r3, #32
 80016fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001700:	f3bf 8f4f 	dsb	sy
}
 8001704:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001706:	f3bf 8f6f 	isb	sy
}
 800170a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff05 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff1a 	bl	800167c <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff0d 	bl	8001698 <__NVIC_EnableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff1d 	bl	80016d4 <__NVIC_DisableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ff94 	bl	80017d8 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e16b      	b.n	8001bb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018d8:	2201      	movs	r2, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	f040 815a 	bne.w	8001baa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d005      	beq.n	800190e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190a:	2b02      	cmp	r3, #2
 800190c:	d130      	bne.n	8001970 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	2203      	movs	r2, #3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001944:	2201      	movs	r2, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 0201 	and.w	r2, r3, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b03      	cmp	r3, #3
 800197a:	d017      	beq.n	80019ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d123      	bne.n	8001a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	08da      	lsrs	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3208      	adds	r2, #8
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80b4 	beq.w	8001baa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b60      	ldr	r3, [pc, #384]	; (8001bc8 <HAL_GPIO_Init+0x30c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a5f      	ldr	r2, [pc, #380]	; (8001bc8 <HAL_GPIO_Init+0x30c>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b5d      	ldr	r3, [pc, #372]	; (8001bc8 <HAL_GPIO_Init+0x30c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a5e:	4a5b      	ldr	r2, [pc, #364]	; (8001bcc <HAL_GPIO_Init+0x310>)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_GPIO_Init+0x314>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d02b      	beq.n	8001ae2 <HAL_GPIO_Init+0x226>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_GPIO_Init+0x318>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d025      	beq.n	8001ade <HAL_GPIO_Init+0x222>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a50      	ldr	r2, [pc, #320]	; (8001bd8 <HAL_GPIO_Init+0x31c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01f      	beq.n	8001ada <HAL_GPIO_Init+0x21e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4f      	ldr	r2, [pc, #316]	; (8001bdc <HAL_GPIO_Init+0x320>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x21a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4e      	ldr	r2, [pc, #312]	; (8001be0 <HAL_GPIO_Init+0x324>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x216>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4d      	ldr	r2, [pc, #308]	; (8001be4 <HAL_GPIO_Init+0x328>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x212>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4c      	ldr	r2, [pc, #304]	; (8001be8 <HAL_GPIO_Init+0x32c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x20e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4b      	ldr	r2, [pc, #300]	; (8001bec <HAL_GPIO_Init+0x330>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x20a>
 8001ac2:	2307      	movs	r3, #7
 8001ac4:	e00e      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	e00c      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001aca:	2306      	movs	r3, #6
 8001acc:	e00a      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ace:	2305      	movs	r3, #5
 8001ad0:	e008      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e004      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e002      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_GPIO_Init+0x228>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	f002 0203 	and.w	r2, r2, #3
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	4093      	lsls	r3, r2
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af4:	4935      	ldr	r1, [pc, #212]	; (8001bcc <HAL_GPIO_Init+0x310>)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	089b      	lsrs	r3, r3, #2
 8001afa:	3302      	adds	r3, #2
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b02:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b26:	4a32      	ldr	r2, [pc, #200]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b50:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba4:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <HAL_GPIO_Init+0x334>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3301      	adds	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b0f      	cmp	r3, #15
 8001bb4:	f67f ae90 	bls.w	80018d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40013800 	.word	0x40013800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020c00 	.word	0x40020c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40021400 	.word	0x40021400
 8001be8:	40021800 	.word	0x40021800
 8001bec:	40021c00 	.word	0x40021c00
 8001bf0:	40013c00 	.word	0x40013c00

08001bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
 8001c00:	4613      	mov	r3, r2
 8001c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c04:	787b      	ldrb	r3, [r7, #1]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c10:	e003      	b.n	8001c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	619a      	str	r2, [r3, #24]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d006      	beq.n	8001c4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff faea 	bl	8001220 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40013c00 	.word	0x40013c00

08001c58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e264      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d075      	beq.n	8001d62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c76:	4ba3      	ldr	r3, [pc, #652]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d00c      	beq.n	8001c9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c82:	4ba0      	ldr	r3, [pc, #640]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d112      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8e:	4b9d      	ldr	r3, [pc, #628]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9c:	4b99      	ldr	r3, [pc, #612]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d05b      	beq.n	8001d60 <HAL_RCC_OscConfig+0x108>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d157      	bne.n	8001d60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e23f      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d106      	bne.n	8001ccc <HAL_RCC_OscConfig+0x74>
 8001cbe:	4b91      	ldr	r3, [pc, #580]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a90      	ldr	r2, [pc, #576]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e01d      	b.n	8001d08 <HAL_RCC_OscConfig+0xb0>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x98>
 8001cd6:	4b8b      	ldr	r3, [pc, #556]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a8a      	ldr	r2, [pc, #552]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b88      	ldr	r3, [pc, #544]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a87      	ldr	r2, [pc, #540]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_OscConfig+0xb0>
 8001cf0:	4b84      	ldr	r3, [pc, #528]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a83      	ldr	r2, [pc, #524]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b81      	ldr	r3, [pc, #516]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a80      	ldr	r2, [pc, #512]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fc60 	bl	80015d4 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fc5c 	bl	80015d4 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e204      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	4b76      	ldr	r3, [pc, #472]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0xc0>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fc4c 	bl	80015d4 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fc48 	bl	80015d4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e1f0      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	4b6c      	ldr	r3, [pc, #432]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0xe8>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d063      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d6e:	4b65      	ldr	r3, [pc, #404]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7a:	4b62      	ldr	r3, [pc, #392]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d11c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d86:	4b5f      	ldr	r3, [pc, #380]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d116      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	4b5c      	ldr	r3, [pc, #368]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x152>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e1c4      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	4b56      	ldr	r3, [pc, #344]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4952      	ldr	r1, [pc, #328]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	e03a      	b.n	8001e36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d020      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc8:	4b4f      	ldr	r3, [pc, #316]	; (8001f08 <HAL_RCC_OscConfig+0x2b0>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff fc01 	bl	80015d4 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fbfd 	bl	80015d4 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e1a5      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df4:	4b43      	ldr	r3, [pc, #268]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4940      	ldr	r1, [pc, #256]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]
 8001e08:	e015      	b.n	8001e36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <HAL_RCC_OscConfig+0x2b0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff fbe0 	bl	80015d4 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e18:	f7ff fbdc 	bl	80015d4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e184      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d030      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d016      	beq.n	8001e78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4a:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <HAL_RCC_OscConfig+0x2b4>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff fbc0 	bl	80015d4 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e58:	f7ff fbbc 	bl	80015d4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e164      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x200>
 8001e76:	e015      	b.n	8001ea4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e78:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <HAL_RCC_OscConfig+0x2b4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fba9 	bl	80015d4 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff fba5 	bl	80015d4 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e14d      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f0      	bne.n	8001e86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80a0 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10f      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_OscConfig+0x2b8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d121      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_RCC_OscConfig+0x2b8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <HAL_RCC_OscConfig+0x2b8>)
 8001ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efa:	f7ff fb6b 	bl	80015d4 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	e011      	b.n	8001f26 <HAL_RCC_OscConfig+0x2ce>
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	42470000 	.word	0x42470000
 8001f0c:	42470e80 	.word	0x42470e80
 8001f10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f14:	f7ff fb5e 	bl	80015d4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e106      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f26:	4b85      	ldr	r3, [pc, #532]	; (800213c <HAL_RCC_OscConfig+0x4e4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d106      	bne.n	8001f48 <HAL_RCC_OscConfig+0x2f0>
 8001f3a:	4b81      	ldr	r3, [pc, #516]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	4a80      	ldr	r2, [pc, #512]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6713      	str	r3, [r2, #112]	; 0x70
 8001f46:	e01c      	b.n	8001f82 <HAL_RCC_OscConfig+0x32a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d10c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x312>
 8001f50:	4b7b      	ldr	r3, [pc, #492]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	4a7a      	ldr	r2, [pc, #488]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5c:	4b78      	ldr	r3, [pc, #480]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	4a77      	ldr	r2, [pc, #476]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6713      	str	r3, [r2, #112]	; 0x70
 8001f68:	e00b      	b.n	8001f82 <HAL_RCC_OscConfig+0x32a>
 8001f6a:	4b75      	ldr	r3, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	4a74      	ldr	r2, [pc, #464]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6713      	str	r3, [r2, #112]	; 0x70
 8001f76:	4b72      	ldr	r3, [pc, #456]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	4a71      	ldr	r2, [pc, #452]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d015      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7ff fb23 	bl	80015d4 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7ff fb1f 	bl	80015d4 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0c5      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	4b65      	ldr	r3, [pc, #404]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ee      	beq.n	8001f92 <HAL_RCC_OscConfig+0x33a>
 8001fb4:	e014      	b.n	8001fe0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fb0d 	bl	80015d4 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff fb09 	bl	80015d4 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0af      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd4:	4b5a      	ldr	r3, [pc, #360]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1ee      	bne.n	8001fbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d105      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe6:	4b56      	ldr	r3, [pc, #344]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a55      	ldr	r2, [pc, #340]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 809b 	beq.w	8002132 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ffc:	4b50      	ldr	r3, [pc, #320]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d05c      	beq.n	80020c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d141      	bne.n	8002094 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <HAL_RCC_OscConfig+0x4ec>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff fadd 	bl	80015d4 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff fad9 	bl	80015d4 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e081      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002030:	4b43      	ldr	r3, [pc, #268]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69da      	ldr	r2, [r3, #28]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	019b      	lsls	r3, r3, #6
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	3b01      	subs	r3, #1
 8002056:	041b      	lsls	r3, r3, #16
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	061b      	lsls	r3, r3, #24
 8002060:	4937      	ldr	r1, [pc, #220]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002066:	4b37      	ldr	r3, [pc, #220]	; (8002144 <HAL_RCC_OscConfig+0x4ec>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff fab2 	bl	80015d4 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff faae 	bl	80015d4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e056      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x41c>
 8002092:	e04e      	b.n	8002132 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002094:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_RCC_OscConfig+0x4ec>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7ff fa9b 	bl	80015d4 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a2:	f7ff fa97 	bl	80015d4 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e03f      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b4:	4b22      	ldr	r3, [pc, #136]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f0      	bne.n	80020a2 <HAL_RCC_OscConfig+0x44a>
 80020c0:	e037      	b.n	8002132 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e032      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020ce:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <HAL_RCC_OscConfig+0x4e8>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d028      	beq.n	800212e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d121      	bne.n	800212e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d11a      	bne.n	800212e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020fe:	4013      	ands	r3, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002104:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002106:	4293      	cmp	r3, r2
 8002108:	d111      	bne.n	800212e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	085b      	lsrs	r3, r3, #1
 8002116:	3b01      	subs	r3, #1
 8002118:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d107      	bne.n	800212e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40007000 	.word	0x40007000
 8002140:	40023800 	.word	0x40023800
 8002144:	42470060 	.word	0x42470060

08002148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0cc      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b68      	ldr	r3, [pc, #416]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d90c      	bls.n	8002184 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b65      	ldr	r3, [pc, #404]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0b8      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800219c:	4b59      	ldr	r3, [pc, #356]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	494d      	ldr	r1, [pc, #308]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d044      	beq.n	8002268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d119      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e07f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d003      	beq.n	8002206 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002202:	2b03      	cmp	r3, #3
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002206:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e06f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e067      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002226:	4b37      	ldr	r3, [pc, #220]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f023 0203 	bic.w	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4934      	ldr	r1, [pc, #208]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	4313      	orrs	r3, r2
 8002236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002238:	f7ff f9cc 	bl	80015d4 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	e00a      	b.n	8002256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7ff f9c8 	bl	80015d4 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e04f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 020c 	and.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	429a      	cmp	r2, r3
 8002266:	d1eb      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002268:	4b25      	ldr	r3, [pc, #148]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d20c      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e032      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4916      	ldr	r1, [pc, #88]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ce:	f000 f821 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	490a      	ldr	r1, [pc, #40]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1c8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f92c 	bl	800154c <HAL_InitTick>

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023c00 	.word	0x40023c00
 8002304:	40023800 	.word	0x40023800
 8002308:	08003558 	.word	0x08003558
 800230c:	20000000 	.word	0x20000000
 8002310:	20000004 	.word	0x20000004

08002314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	2300      	movs	r3, #0
 8002326:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800232c:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b08      	cmp	r3, #8
 8002336:	d00d      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x40>
 8002338:	2b08      	cmp	r3, #8
 800233a:	f200 80bd 	bhi.w	80024b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x34>
 8002342:	2b04      	cmp	r3, #4
 8002344:	d003      	beq.n	800234e <HAL_RCC_GetSysClockFreq+0x3a>
 8002346:	e0b7      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002348:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800234a:	60bb      	str	r3, [r7, #8]
       break;
 800234c:	e0b7      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800234e:	4b61      	ldr	r3, [pc, #388]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002350:	60bb      	str	r3, [r7, #8]
      break;
 8002352:	e0b4      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002354:	4b5d      	ldr	r3, [pc, #372]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800235c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800235e:	4b5b      	ldr	r3, [pc, #364]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d04d      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236a:	4b58      	ldr	r3, [pc, #352]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	099b      	lsrs	r3, r3, #6
 8002370:	461a      	mov	r2, r3
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	f240 10ff 	movw	r0, #511	; 0x1ff
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	ea02 0800 	and.w	r8, r2, r0
 8002382:	ea03 0901 	and.w	r9, r3, r1
 8002386:	4640      	mov	r0, r8
 8002388:	4649      	mov	r1, r9
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	014b      	lsls	r3, r1, #5
 8002394:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002398:	0142      	lsls	r2, r0, #5
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	ebb0 0008 	subs.w	r0, r0, r8
 80023a2:	eb61 0109 	sbc.w	r1, r1, r9
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	018b      	lsls	r3, r1, #6
 80023b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023b4:	0182      	lsls	r2, r0, #6
 80023b6:	1a12      	subs	r2, r2, r0
 80023b8:	eb63 0301 	sbc.w	r3, r3, r1
 80023bc:	f04f 0000 	mov.w	r0, #0
 80023c0:	f04f 0100 	mov.w	r1, #0
 80023c4:	00d9      	lsls	r1, r3, #3
 80023c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023ca:	00d0      	lsls	r0, r2, #3
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	eb12 0208 	adds.w	r2, r2, r8
 80023d4:	eb43 0309 	adc.w	r3, r3, r9
 80023d8:	f04f 0000 	mov.w	r0, #0
 80023dc:	f04f 0100 	mov.w	r1, #0
 80023e0:	0259      	lsls	r1, r3, #9
 80023e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80023e6:	0250      	lsls	r0, r2, #9
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	f7fe fb58 	bl	8000aac <__aeabi_uldivmod>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4613      	mov	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e04a      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002406:	4b31      	ldr	r3, [pc, #196]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	461a      	mov	r2, r3
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002416:	f04f 0100 	mov.w	r1, #0
 800241a:	ea02 0400 	and.w	r4, r2, r0
 800241e:	ea03 0501 	and.w	r5, r3, r1
 8002422:	4620      	mov	r0, r4
 8002424:	4629      	mov	r1, r5
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	014b      	lsls	r3, r1, #5
 8002430:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002434:	0142      	lsls	r2, r0, #5
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	1b00      	subs	r0, r0, r4
 800243c:	eb61 0105 	sbc.w	r1, r1, r5
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	018b      	lsls	r3, r1, #6
 800244a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800244e:	0182      	lsls	r2, r0, #6
 8002450:	1a12      	subs	r2, r2, r0
 8002452:	eb63 0301 	sbc.w	r3, r3, r1
 8002456:	f04f 0000 	mov.w	r0, #0
 800245a:	f04f 0100 	mov.w	r1, #0
 800245e:	00d9      	lsls	r1, r3, #3
 8002460:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002464:	00d0      	lsls	r0, r2, #3
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	1912      	adds	r2, r2, r4
 800246c:	eb45 0303 	adc.w	r3, r5, r3
 8002470:	f04f 0000 	mov.w	r0, #0
 8002474:	f04f 0100 	mov.w	r1, #0
 8002478:	0299      	lsls	r1, r3, #10
 800247a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800247e:	0290      	lsls	r0, r2, #10
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	461a      	mov	r2, r3
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	f7fe fb0c 	bl	8000aac <__aeabi_uldivmod>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4613      	mov	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	3301      	adds	r3, #1
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b4:	60bb      	str	r3, [r7, #8]
      break;
 80024b6:	e002      	b.n	80024be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024ba:	60bb      	str	r3, [r7, #8]
      break;
 80024bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024be:	68bb      	ldr	r3, [r7, #8]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	00f42400 	.word	0x00f42400
 80024d4:	007a1200 	.word	0x007a1200

080024d8 <__errno>:
 80024d8:	4b01      	ldr	r3, [pc, #4]	; (80024e0 <__errno+0x8>)
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	2000000c 	.word	0x2000000c

080024e4 <__libc_init_array>:
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	4d0d      	ldr	r5, [pc, #52]	; (800251c <__libc_init_array+0x38>)
 80024e8:	4c0d      	ldr	r4, [pc, #52]	; (8002520 <__libc_init_array+0x3c>)
 80024ea:	1b64      	subs	r4, r4, r5
 80024ec:	10a4      	asrs	r4, r4, #2
 80024ee:	2600      	movs	r6, #0
 80024f0:	42a6      	cmp	r6, r4
 80024f2:	d109      	bne.n	8002508 <__libc_init_array+0x24>
 80024f4:	4d0b      	ldr	r5, [pc, #44]	; (8002524 <__libc_init_array+0x40>)
 80024f6:	4c0c      	ldr	r4, [pc, #48]	; (8002528 <__libc_init_array+0x44>)
 80024f8:	f001 f822 	bl	8003540 <_init>
 80024fc:	1b64      	subs	r4, r4, r5
 80024fe:	10a4      	asrs	r4, r4, #2
 8002500:	2600      	movs	r6, #0
 8002502:	42a6      	cmp	r6, r4
 8002504:	d105      	bne.n	8002512 <__libc_init_array+0x2e>
 8002506:	bd70      	pop	{r4, r5, r6, pc}
 8002508:	f855 3b04 	ldr.w	r3, [r5], #4
 800250c:	4798      	blx	r3
 800250e:	3601      	adds	r6, #1
 8002510:	e7ee      	b.n	80024f0 <__libc_init_array+0xc>
 8002512:	f855 3b04 	ldr.w	r3, [r5], #4
 8002516:	4798      	blx	r3
 8002518:	3601      	adds	r6, #1
 800251a:	e7f2      	b.n	8002502 <__libc_init_array+0x1e>
 800251c:	080036bc 	.word	0x080036bc
 8002520:	080036bc 	.word	0x080036bc
 8002524:	080036bc 	.word	0x080036bc
 8002528:	080036c0 	.word	0x080036c0

0800252c <memset>:
 800252c:	4402      	add	r2, r0
 800252e:	4603      	mov	r3, r0
 8002530:	4293      	cmp	r3, r2
 8002532:	d100      	bne.n	8002536 <memset+0xa>
 8002534:	4770      	bx	lr
 8002536:	f803 1b01 	strb.w	r1, [r3], #1
 800253a:	e7f9      	b.n	8002530 <memset+0x4>

0800253c <rand>:
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <rand+0x60>)
 800253e:	b510      	push	{r4, lr}
 8002540:	681c      	ldr	r4, [r3, #0]
 8002542:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002544:	b9b3      	cbnz	r3, 8002574 <rand+0x38>
 8002546:	2018      	movs	r0, #24
 8002548:	f000 f868 	bl	800261c <malloc>
 800254c:	63a0      	str	r0, [r4, #56]	; 0x38
 800254e:	b928      	cbnz	r0, 800255c <rand+0x20>
 8002550:	4602      	mov	r2, r0
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <rand+0x64>)
 8002554:	4813      	ldr	r0, [pc, #76]	; (80025a4 <rand+0x68>)
 8002556:	214e      	movs	r1, #78	; 0x4e
 8002558:	f000 f830 	bl	80025bc <__assert_func>
 800255c:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <rand+0x6c>)
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <rand+0x70>)
 8002560:	e9c0 2300 	strd	r2, r3, [r0]
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <rand+0x74>)
 8002566:	6083      	str	r3, [r0, #8]
 8002568:	230b      	movs	r3, #11
 800256a:	8183      	strh	r3, [r0, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	2300      	movs	r3, #0
 8002570:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002574:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002576:	480f      	ldr	r0, [pc, #60]	; (80025b4 <rand+0x78>)
 8002578:	690a      	ldr	r2, [r1, #16]
 800257a:	694b      	ldr	r3, [r1, #20]
 800257c:	4c0e      	ldr	r4, [pc, #56]	; (80025b8 <rand+0x7c>)
 800257e:	4350      	muls	r0, r2
 8002580:	fb04 0003 	mla	r0, r4, r3, r0
 8002584:	fba2 3404 	umull	r3, r4, r2, r4
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	4404      	add	r4, r0
 800258c:	f144 0000 	adc.w	r0, r4, #0
 8002590:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8002594:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002598:	bd10      	pop	{r4, pc}
 800259a:	bf00      	nop
 800259c:	2000000c 	.word	0x2000000c
 80025a0:	0800356c 	.word	0x0800356c
 80025a4:	08003583 	.word	0x08003583
 80025a8:	abcd330e 	.word	0xabcd330e
 80025ac:	e66d1234 	.word	0xe66d1234
 80025b0:	0005deec 	.word	0x0005deec
 80025b4:	5851f42d 	.word	0x5851f42d
 80025b8:	4c957f2d 	.word	0x4c957f2d

080025bc <__assert_func>:
 80025bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80025be:	4614      	mov	r4, r2
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <__assert_func+0x2c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4605      	mov	r5, r0
 80025c8:	68d8      	ldr	r0, [r3, #12]
 80025ca:	b14c      	cbz	r4, 80025e0 <__assert_func+0x24>
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <__assert_func+0x30>)
 80025ce:	9100      	str	r1, [sp, #0]
 80025d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80025d4:	4906      	ldr	r1, [pc, #24]	; (80025f0 <__assert_func+0x34>)
 80025d6:	462b      	mov	r3, r5
 80025d8:	f000 f80e 	bl	80025f8 <fiprintf>
 80025dc:	f000 fc8e 	bl	8002efc <abort>
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <__assert_func+0x38>)
 80025e2:	461c      	mov	r4, r3
 80025e4:	e7f3      	b.n	80025ce <__assert_func+0x12>
 80025e6:	bf00      	nop
 80025e8:	2000000c 	.word	0x2000000c
 80025ec:	080035e2 	.word	0x080035e2
 80025f0:	080035ef 	.word	0x080035ef
 80025f4:	0800361d 	.word	0x0800361d

080025f8 <fiprintf>:
 80025f8:	b40e      	push	{r1, r2, r3}
 80025fa:	b503      	push	{r0, r1, lr}
 80025fc:	4601      	mov	r1, r0
 80025fe:	ab03      	add	r3, sp, #12
 8002600:	4805      	ldr	r0, [pc, #20]	; (8002618 <fiprintf+0x20>)
 8002602:	f853 2b04 	ldr.w	r2, [r3], #4
 8002606:	6800      	ldr	r0, [r0, #0]
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	f000 f8e3 	bl	80027d4 <_vfiprintf_r>
 800260e:	b002      	add	sp, #8
 8002610:	f85d eb04 	ldr.w	lr, [sp], #4
 8002614:	b003      	add	sp, #12
 8002616:	4770      	bx	lr
 8002618:	2000000c 	.word	0x2000000c

0800261c <malloc>:
 800261c:	4b02      	ldr	r3, [pc, #8]	; (8002628 <malloc+0xc>)
 800261e:	4601      	mov	r1, r0
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	f000 b853 	b.w	80026cc <_malloc_r>
 8002626:	bf00      	nop
 8002628:	2000000c 	.word	0x2000000c

0800262c <_free_r>:
 800262c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800262e:	2900      	cmp	r1, #0
 8002630:	d048      	beq.n	80026c4 <_free_r+0x98>
 8002632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002636:	9001      	str	r0, [sp, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f1a1 0404 	sub.w	r4, r1, #4
 800263e:	bfb8      	it	lt
 8002640:	18e4      	addlt	r4, r4, r3
 8002642:	f000 fe81 	bl	8003348 <__malloc_lock>
 8002646:	4a20      	ldr	r2, [pc, #128]	; (80026c8 <_free_r+0x9c>)
 8002648:	9801      	ldr	r0, [sp, #4]
 800264a:	6813      	ldr	r3, [r2, #0]
 800264c:	4615      	mov	r5, r2
 800264e:	b933      	cbnz	r3, 800265e <_free_r+0x32>
 8002650:	6063      	str	r3, [r4, #4]
 8002652:	6014      	str	r4, [r2, #0]
 8002654:	b003      	add	sp, #12
 8002656:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800265a:	f000 be7b 	b.w	8003354 <__malloc_unlock>
 800265e:	42a3      	cmp	r3, r4
 8002660:	d90b      	bls.n	800267a <_free_r+0x4e>
 8002662:	6821      	ldr	r1, [r4, #0]
 8002664:	1862      	adds	r2, r4, r1
 8002666:	4293      	cmp	r3, r2
 8002668:	bf04      	itt	eq
 800266a:	681a      	ldreq	r2, [r3, #0]
 800266c:	685b      	ldreq	r3, [r3, #4]
 800266e:	6063      	str	r3, [r4, #4]
 8002670:	bf04      	itt	eq
 8002672:	1852      	addeq	r2, r2, r1
 8002674:	6022      	streq	r2, [r4, #0]
 8002676:	602c      	str	r4, [r5, #0]
 8002678:	e7ec      	b.n	8002654 <_free_r+0x28>
 800267a:	461a      	mov	r2, r3
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	b10b      	cbz	r3, 8002684 <_free_r+0x58>
 8002680:	42a3      	cmp	r3, r4
 8002682:	d9fa      	bls.n	800267a <_free_r+0x4e>
 8002684:	6811      	ldr	r1, [r2, #0]
 8002686:	1855      	adds	r5, r2, r1
 8002688:	42a5      	cmp	r5, r4
 800268a:	d10b      	bne.n	80026a4 <_free_r+0x78>
 800268c:	6824      	ldr	r4, [r4, #0]
 800268e:	4421      	add	r1, r4
 8002690:	1854      	adds	r4, r2, r1
 8002692:	42a3      	cmp	r3, r4
 8002694:	6011      	str	r1, [r2, #0]
 8002696:	d1dd      	bne.n	8002654 <_free_r+0x28>
 8002698:	681c      	ldr	r4, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	6053      	str	r3, [r2, #4]
 800269e:	4421      	add	r1, r4
 80026a0:	6011      	str	r1, [r2, #0]
 80026a2:	e7d7      	b.n	8002654 <_free_r+0x28>
 80026a4:	d902      	bls.n	80026ac <_free_r+0x80>
 80026a6:	230c      	movs	r3, #12
 80026a8:	6003      	str	r3, [r0, #0]
 80026aa:	e7d3      	b.n	8002654 <_free_r+0x28>
 80026ac:	6825      	ldr	r5, [r4, #0]
 80026ae:	1961      	adds	r1, r4, r5
 80026b0:	428b      	cmp	r3, r1
 80026b2:	bf04      	itt	eq
 80026b4:	6819      	ldreq	r1, [r3, #0]
 80026b6:	685b      	ldreq	r3, [r3, #4]
 80026b8:	6063      	str	r3, [r4, #4]
 80026ba:	bf04      	itt	eq
 80026bc:	1949      	addeq	r1, r1, r5
 80026be:	6021      	streq	r1, [r4, #0]
 80026c0:	6054      	str	r4, [r2, #4]
 80026c2:	e7c7      	b.n	8002654 <_free_r+0x28>
 80026c4:	b003      	add	sp, #12
 80026c6:	bd30      	pop	{r4, r5, pc}
 80026c8:	200000a0 	.word	0x200000a0

080026cc <_malloc_r>:
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	1ccd      	adds	r5, r1, #3
 80026d0:	f025 0503 	bic.w	r5, r5, #3
 80026d4:	3508      	adds	r5, #8
 80026d6:	2d0c      	cmp	r5, #12
 80026d8:	bf38      	it	cc
 80026da:	250c      	movcc	r5, #12
 80026dc:	2d00      	cmp	r5, #0
 80026de:	4606      	mov	r6, r0
 80026e0:	db01      	blt.n	80026e6 <_malloc_r+0x1a>
 80026e2:	42a9      	cmp	r1, r5
 80026e4:	d903      	bls.n	80026ee <_malloc_r+0x22>
 80026e6:	230c      	movs	r3, #12
 80026e8:	6033      	str	r3, [r6, #0]
 80026ea:	2000      	movs	r0, #0
 80026ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026ee:	f000 fe2b 	bl	8003348 <__malloc_lock>
 80026f2:	4921      	ldr	r1, [pc, #132]	; (8002778 <_malloc_r+0xac>)
 80026f4:	680a      	ldr	r2, [r1, #0]
 80026f6:	4614      	mov	r4, r2
 80026f8:	b99c      	cbnz	r4, 8002722 <_malloc_r+0x56>
 80026fa:	4f20      	ldr	r7, [pc, #128]	; (800277c <_malloc_r+0xb0>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	b923      	cbnz	r3, 800270a <_malloc_r+0x3e>
 8002700:	4621      	mov	r1, r4
 8002702:	4630      	mov	r0, r6
 8002704:	f000 fb2a 	bl	8002d5c <_sbrk_r>
 8002708:	6038      	str	r0, [r7, #0]
 800270a:	4629      	mov	r1, r5
 800270c:	4630      	mov	r0, r6
 800270e:	f000 fb25 	bl	8002d5c <_sbrk_r>
 8002712:	1c43      	adds	r3, r0, #1
 8002714:	d123      	bne.n	800275e <_malloc_r+0x92>
 8002716:	230c      	movs	r3, #12
 8002718:	6033      	str	r3, [r6, #0]
 800271a:	4630      	mov	r0, r6
 800271c:	f000 fe1a 	bl	8003354 <__malloc_unlock>
 8002720:	e7e3      	b.n	80026ea <_malloc_r+0x1e>
 8002722:	6823      	ldr	r3, [r4, #0]
 8002724:	1b5b      	subs	r3, r3, r5
 8002726:	d417      	bmi.n	8002758 <_malloc_r+0x8c>
 8002728:	2b0b      	cmp	r3, #11
 800272a:	d903      	bls.n	8002734 <_malloc_r+0x68>
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	441c      	add	r4, r3
 8002730:	6025      	str	r5, [r4, #0]
 8002732:	e004      	b.n	800273e <_malloc_r+0x72>
 8002734:	6863      	ldr	r3, [r4, #4]
 8002736:	42a2      	cmp	r2, r4
 8002738:	bf0c      	ite	eq
 800273a:	600b      	streq	r3, [r1, #0]
 800273c:	6053      	strne	r3, [r2, #4]
 800273e:	4630      	mov	r0, r6
 8002740:	f000 fe08 	bl	8003354 <__malloc_unlock>
 8002744:	f104 000b 	add.w	r0, r4, #11
 8002748:	1d23      	adds	r3, r4, #4
 800274a:	f020 0007 	bic.w	r0, r0, #7
 800274e:	1ac2      	subs	r2, r0, r3
 8002750:	d0cc      	beq.n	80026ec <_malloc_r+0x20>
 8002752:	1a1b      	subs	r3, r3, r0
 8002754:	50a3      	str	r3, [r4, r2]
 8002756:	e7c9      	b.n	80026ec <_malloc_r+0x20>
 8002758:	4622      	mov	r2, r4
 800275a:	6864      	ldr	r4, [r4, #4]
 800275c:	e7cc      	b.n	80026f8 <_malloc_r+0x2c>
 800275e:	1cc4      	adds	r4, r0, #3
 8002760:	f024 0403 	bic.w	r4, r4, #3
 8002764:	42a0      	cmp	r0, r4
 8002766:	d0e3      	beq.n	8002730 <_malloc_r+0x64>
 8002768:	1a21      	subs	r1, r4, r0
 800276a:	4630      	mov	r0, r6
 800276c:	f000 faf6 	bl	8002d5c <_sbrk_r>
 8002770:	3001      	adds	r0, #1
 8002772:	d1dd      	bne.n	8002730 <_malloc_r+0x64>
 8002774:	e7cf      	b.n	8002716 <_malloc_r+0x4a>
 8002776:	bf00      	nop
 8002778:	200000a0 	.word	0x200000a0
 800277c:	200000a4 	.word	0x200000a4

08002780 <__sfputc_r>:
 8002780:	6893      	ldr	r3, [r2, #8]
 8002782:	3b01      	subs	r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	b410      	push	{r4}
 8002788:	6093      	str	r3, [r2, #8]
 800278a:	da08      	bge.n	800279e <__sfputc_r+0x1e>
 800278c:	6994      	ldr	r4, [r2, #24]
 800278e:	42a3      	cmp	r3, r4
 8002790:	db01      	blt.n	8002796 <__sfputc_r+0x16>
 8002792:	290a      	cmp	r1, #10
 8002794:	d103      	bne.n	800279e <__sfputc_r+0x1e>
 8002796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800279a:	f000 baef 	b.w	8002d7c <__swbuf_r>
 800279e:	6813      	ldr	r3, [r2, #0]
 80027a0:	1c58      	adds	r0, r3, #1
 80027a2:	6010      	str	r0, [r2, #0]
 80027a4:	7019      	strb	r1, [r3, #0]
 80027a6:	4608      	mov	r0, r1
 80027a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <__sfputs_r>:
 80027ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b0:	4606      	mov	r6, r0
 80027b2:	460f      	mov	r7, r1
 80027b4:	4614      	mov	r4, r2
 80027b6:	18d5      	adds	r5, r2, r3
 80027b8:	42ac      	cmp	r4, r5
 80027ba:	d101      	bne.n	80027c0 <__sfputs_r+0x12>
 80027bc:	2000      	movs	r0, #0
 80027be:	e007      	b.n	80027d0 <__sfputs_r+0x22>
 80027c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027c4:	463a      	mov	r2, r7
 80027c6:	4630      	mov	r0, r6
 80027c8:	f7ff ffda 	bl	8002780 <__sfputc_r>
 80027cc:	1c43      	adds	r3, r0, #1
 80027ce:	d1f3      	bne.n	80027b8 <__sfputs_r+0xa>
 80027d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027d4 <_vfiprintf_r>:
 80027d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d8:	460d      	mov	r5, r1
 80027da:	b09d      	sub	sp, #116	; 0x74
 80027dc:	4614      	mov	r4, r2
 80027de:	4698      	mov	r8, r3
 80027e0:	4606      	mov	r6, r0
 80027e2:	b118      	cbz	r0, 80027ec <_vfiprintf_r+0x18>
 80027e4:	6983      	ldr	r3, [r0, #24]
 80027e6:	b90b      	cbnz	r3, 80027ec <_vfiprintf_r+0x18>
 80027e8:	f000 fcaa 	bl	8003140 <__sinit>
 80027ec:	4b89      	ldr	r3, [pc, #548]	; (8002a14 <_vfiprintf_r+0x240>)
 80027ee:	429d      	cmp	r5, r3
 80027f0:	d11b      	bne.n	800282a <_vfiprintf_r+0x56>
 80027f2:	6875      	ldr	r5, [r6, #4]
 80027f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027f6:	07d9      	lsls	r1, r3, #31
 80027f8:	d405      	bmi.n	8002806 <_vfiprintf_r+0x32>
 80027fa:	89ab      	ldrh	r3, [r5, #12]
 80027fc:	059a      	lsls	r2, r3, #22
 80027fe:	d402      	bmi.n	8002806 <_vfiprintf_r+0x32>
 8002800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002802:	f000 fd3b 	bl	800327c <__retarget_lock_acquire_recursive>
 8002806:	89ab      	ldrh	r3, [r5, #12]
 8002808:	071b      	lsls	r3, r3, #28
 800280a:	d501      	bpl.n	8002810 <_vfiprintf_r+0x3c>
 800280c:	692b      	ldr	r3, [r5, #16]
 800280e:	b9eb      	cbnz	r3, 800284c <_vfiprintf_r+0x78>
 8002810:	4629      	mov	r1, r5
 8002812:	4630      	mov	r0, r6
 8002814:	f000 fb04 	bl	8002e20 <__swsetup_r>
 8002818:	b1c0      	cbz	r0, 800284c <_vfiprintf_r+0x78>
 800281a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800281c:	07dc      	lsls	r4, r3, #31
 800281e:	d50e      	bpl.n	800283e <_vfiprintf_r+0x6a>
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	b01d      	add	sp, #116	; 0x74
 8002826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800282a:	4b7b      	ldr	r3, [pc, #492]	; (8002a18 <_vfiprintf_r+0x244>)
 800282c:	429d      	cmp	r5, r3
 800282e:	d101      	bne.n	8002834 <_vfiprintf_r+0x60>
 8002830:	68b5      	ldr	r5, [r6, #8]
 8002832:	e7df      	b.n	80027f4 <_vfiprintf_r+0x20>
 8002834:	4b79      	ldr	r3, [pc, #484]	; (8002a1c <_vfiprintf_r+0x248>)
 8002836:	429d      	cmp	r5, r3
 8002838:	bf08      	it	eq
 800283a:	68f5      	ldreq	r5, [r6, #12]
 800283c:	e7da      	b.n	80027f4 <_vfiprintf_r+0x20>
 800283e:	89ab      	ldrh	r3, [r5, #12]
 8002840:	0598      	lsls	r0, r3, #22
 8002842:	d4ed      	bmi.n	8002820 <_vfiprintf_r+0x4c>
 8002844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002846:	f000 fd1a 	bl	800327e <__retarget_lock_release_recursive>
 800284a:	e7e9      	b.n	8002820 <_vfiprintf_r+0x4c>
 800284c:	2300      	movs	r3, #0
 800284e:	9309      	str	r3, [sp, #36]	; 0x24
 8002850:	2320      	movs	r3, #32
 8002852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002856:	f8cd 800c 	str.w	r8, [sp, #12]
 800285a:	2330      	movs	r3, #48	; 0x30
 800285c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002a20 <_vfiprintf_r+0x24c>
 8002860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002864:	f04f 0901 	mov.w	r9, #1
 8002868:	4623      	mov	r3, r4
 800286a:	469a      	mov	sl, r3
 800286c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002870:	b10a      	cbz	r2, 8002876 <_vfiprintf_r+0xa2>
 8002872:	2a25      	cmp	r2, #37	; 0x25
 8002874:	d1f9      	bne.n	800286a <_vfiprintf_r+0x96>
 8002876:	ebba 0b04 	subs.w	fp, sl, r4
 800287a:	d00b      	beq.n	8002894 <_vfiprintf_r+0xc0>
 800287c:	465b      	mov	r3, fp
 800287e:	4622      	mov	r2, r4
 8002880:	4629      	mov	r1, r5
 8002882:	4630      	mov	r0, r6
 8002884:	f7ff ff93 	bl	80027ae <__sfputs_r>
 8002888:	3001      	adds	r0, #1
 800288a:	f000 80aa 	beq.w	80029e2 <_vfiprintf_r+0x20e>
 800288e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002890:	445a      	add	r2, fp
 8002892:	9209      	str	r2, [sp, #36]	; 0x24
 8002894:	f89a 3000 	ldrb.w	r3, [sl]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80a2 	beq.w	80029e2 <_vfiprintf_r+0x20e>
 800289e:	2300      	movs	r3, #0
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295
 80028a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028a8:	f10a 0a01 	add.w	sl, sl, #1
 80028ac:	9304      	str	r3, [sp, #16]
 80028ae:	9307      	str	r3, [sp, #28]
 80028b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028b4:	931a      	str	r3, [sp, #104]	; 0x68
 80028b6:	4654      	mov	r4, sl
 80028b8:	2205      	movs	r2, #5
 80028ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028be:	4858      	ldr	r0, [pc, #352]	; (8002a20 <_vfiprintf_r+0x24c>)
 80028c0:	f7fd fc86 	bl	80001d0 <memchr>
 80028c4:	9a04      	ldr	r2, [sp, #16]
 80028c6:	b9d8      	cbnz	r0, 8002900 <_vfiprintf_r+0x12c>
 80028c8:	06d1      	lsls	r1, r2, #27
 80028ca:	bf44      	itt	mi
 80028cc:	2320      	movmi	r3, #32
 80028ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028d2:	0713      	lsls	r3, r2, #28
 80028d4:	bf44      	itt	mi
 80028d6:	232b      	movmi	r3, #43	; 0x2b
 80028d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028dc:	f89a 3000 	ldrb.w	r3, [sl]
 80028e0:	2b2a      	cmp	r3, #42	; 0x2a
 80028e2:	d015      	beq.n	8002910 <_vfiprintf_r+0x13c>
 80028e4:	9a07      	ldr	r2, [sp, #28]
 80028e6:	4654      	mov	r4, sl
 80028e8:	2000      	movs	r0, #0
 80028ea:	f04f 0c0a 	mov.w	ip, #10
 80028ee:	4621      	mov	r1, r4
 80028f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028f4:	3b30      	subs	r3, #48	; 0x30
 80028f6:	2b09      	cmp	r3, #9
 80028f8:	d94e      	bls.n	8002998 <_vfiprintf_r+0x1c4>
 80028fa:	b1b0      	cbz	r0, 800292a <_vfiprintf_r+0x156>
 80028fc:	9207      	str	r2, [sp, #28]
 80028fe:	e014      	b.n	800292a <_vfiprintf_r+0x156>
 8002900:	eba0 0308 	sub.w	r3, r0, r8
 8002904:	fa09 f303 	lsl.w	r3, r9, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	9304      	str	r3, [sp, #16]
 800290c:	46a2      	mov	sl, r4
 800290e:	e7d2      	b.n	80028b6 <_vfiprintf_r+0xe2>
 8002910:	9b03      	ldr	r3, [sp, #12]
 8002912:	1d19      	adds	r1, r3, #4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	9103      	str	r1, [sp, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	bfbb      	ittet	lt
 800291c:	425b      	neglt	r3, r3
 800291e:	f042 0202 	orrlt.w	r2, r2, #2
 8002922:	9307      	strge	r3, [sp, #28]
 8002924:	9307      	strlt	r3, [sp, #28]
 8002926:	bfb8      	it	lt
 8002928:	9204      	strlt	r2, [sp, #16]
 800292a:	7823      	ldrb	r3, [r4, #0]
 800292c:	2b2e      	cmp	r3, #46	; 0x2e
 800292e:	d10c      	bne.n	800294a <_vfiprintf_r+0x176>
 8002930:	7863      	ldrb	r3, [r4, #1]
 8002932:	2b2a      	cmp	r3, #42	; 0x2a
 8002934:	d135      	bne.n	80029a2 <_vfiprintf_r+0x1ce>
 8002936:	9b03      	ldr	r3, [sp, #12]
 8002938:	1d1a      	adds	r2, r3, #4
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	9203      	str	r2, [sp, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	bfb8      	it	lt
 8002942:	f04f 33ff 	movlt.w	r3, #4294967295
 8002946:	3402      	adds	r4, #2
 8002948:	9305      	str	r3, [sp, #20]
 800294a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002a30 <_vfiprintf_r+0x25c>
 800294e:	7821      	ldrb	r1, [r4, #0]
 8002950:	2203      	movs	r2, #3
 8002952:	4650      	mov	r0, sl
 8002954:	f7fd fc3c 	bl	80001d0 <memchr>
 8002958:	b140      	cbz	r0, 800296c <_vfiprintf_r+0x198>
 800295a:	2340      	movs	r3, #64	; 0x40
 800295c:	eba0 000a 	sub.w	r0, r0, sl
 8002960:	fa03 f000 	lsl.w	r0, r3, r0
 8002964:	9b04      	ldr	r3, [sp, #16]
 8002966:	4303      	orrs	r3, r0
 8002968:	3401      	adds	r4, #1
 800296a:	9304      	str	r3, [sp, #16]
 800296c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002970:	482c      	ldr	r0, [pc, #176]	; (8002a24 <_vfiprintf_r+0x250>)
 8002972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002976:	2206      	movs	r2, #6
 8002978:	f7fd fc2a 	bl	80001d0 <memchr>
 800297c:	2800      	cmp	r0, #0
 800297e:	d03f      	beq.n	8002a00 <_vfiprintf_r+0x22c>
 8002980:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <_vfiprintf_r+0x254>)
 8002982:	bb1b      	cbnz	r3, 80029cc <_vfiprintf_r+0x1f8>
 8002984:	9b03      	ldr	r3, [sp, #12]
 8002986:	3307      	adds	r3, #7
 8002988:	f023 0307 	bic.w	r3, r3, #7
 800298c:	3308      	adds	r3, #8
 800298e:	9303      	str	r3, [sp, #12]
 8002990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002992:	443b      	add	r3, r7
 8002994:	9309      	str	r3, [sp, #36]	; 0x24
 8002996:	e767      	b.n	8002868 <_vfiprintf_r+0x94>
 8002998:	fb0c 3202 	mla	r2, ip, r2, r3
 800299c:	460c      	mov	r4, r1
 800299e:	2001      	movs	r0, #1
 80029a0:	e7a5      	b.n	80028ee <_vfiprintf_r+0x11a>
 80029a2:	2300      	movs	r3, #0
 80029a4:	3401      	adds	r4, #1
 80029a6:	9305      	str	r3, [sp, #20]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f04f 0c0a 	mov.w	ip, #10
 80029ae:	4620      	mov	r0, r4
 80029b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029b4:	3a30      	subs	r2, #48	; 0x30
 80029b6:	2a09      	cmp	r2, #9
 80029b8:	d903      	bls.n	80029c2 <_vfiprintf_r+0x1ee>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0c5      	beq.n	800294a <_vfiprintf_r+0x176>
 80029be:	9105      	str	r1, [sp, #20]
 80029c0:	e7c3      	b.n	800294a <_vfiprintf_r+0x176>
 80029c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80029c6:	4604      	mov	r4, r0
 80029c8:	2301      	movs	r3, #1
 80029ca:	e7f0      	b.n	80029ae <_vfiprintf_r+0x1da>
 80029cc:	ab03      	add	r3, sp, #12
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	462a      	mov	r2, r5
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <_vfiprintf_r+0x258>)
 80029d4:	a904      	add	r1, sp, #16
 80029d6:	4630      	mov	r0, r6
 80029d8:	f3af 8000 	nop.w
 80029dc:	4607      	mov	r7, r0
 80029de:	1c78      	adds	r0, r7, #1
 80029e0:	d1d6      	bne.n	8002990 <_vfiprintf_r+0x1bc>
 80029e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029e4:	07d9      	lsls	r1, r3, #31
 80029e6:	d405      	bmi.n	80029f4 <_vfiprintf_r+0x220>
 80029e8:	89ab      	ldrh	r3, [r5, #12]
 80029ea:	059a      	lsls	r2, r3, #22
 80029ec:	d402      	bmi.n	80029f4 <_vfiprintf_r+0x220>
 80029ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029f0:	f000 fc45 	bl	800327e <__retarget_lock_release_recursive>
 80029f4:	89ab      	ldrh	r3, [r5, #12]
 80029f6:	065b      	lsls	r3, r3, #25
 80029f8:	f53f af12 	bmi.w	8002820 <_vfiprintf_r+0x4c>
 80029fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029fe:	e711      	b.n	8002824 <_vfiprintf_r+0x50>
 8002a00:	ab03      	add	r3, sp, #12
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	462a      	mov	r2, r5
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <_vfiprintf_r+0x258>)
 8002a08:	a904      	add	r1, sp, #16
 8002a0a:	4630      	mov	r0, r6
 8002a0c:	f000 f880 	bl	8002b10 <_printf_i>
 8002a10:	e7e4      	b.n	80029dc <_vfiprintf_r+0x208>
 8002a12:	bf00      	nop
 8002a14:	08003674 	.word	0x08003674
 8002a18:	08003694 	.word	0x08003694
 8002a1c:	08003654 	.word	0x08003654
 8002a20:	0800361e 	.word	0x0800361e
 8002a24:	08003628 	.word	0x08003628
 8002a28:	00000000 	.word	0x00000000
 8002a2c:	080027af 	.word	0x080027af
 8002a30:	08003624 	.word	0x08003624

08002a34 <_printf_common>:
 8002a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a38:	4616      	mov	r6, r2
 8002a3a:	4699      	mov	r9, r3
 8002a3c:	688a      	ldr	r2, [r1, #8]
 8002a3e:	690b      	ldr	r3, [r1, #16]
 8002a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a44:	4293      	cmp	r3, r2
 8002a46:	bfb8      	it	lt
 8002a48:	4613      	movlt	r3, r2
 8002a4a:	6033      	str	r3, [r6, #0]
 8002a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a50:	4607      	mov	r7, r0
 8002a52:	460c      	mov	r4, r1
 8002a54:	b10a      	cbz	r2, 8002a5a <_printf_common+0x26>
 8002a56:	3301      	adds	r3, #1
 8002a58:	6033      	str	r3, [r6, #0]
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	0699      	lsls	r1, r3, #26
 8002a5e:	bf42      	ittt	mi
 8002a60:	6833      	ldrmi	r3, [r6, #0]
 8002a62:	3302      	addmi	r3, #2
 8002a64:	6033      	strmi	r3, [r6, #0]
 8002a66:	6825      	ldr	r5, [r4, #0]
 8002a68:	f015 0506 	ands.w	r5, r5, #6
 8002a6c:	d106      	bne.n	8002a7c <_printf_common+0x48>
 8002a6e:	f104 0a19 	add.w	sl, r4, #25
 8002a72:	68e3      	ldr	r3, [r4, #12]
 8002a74:	6832      	ldr	r2, [r6, #0]
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	42ab      	cmp	r3, r5
 8002a7a:	dc26      	bgt.n	8002aca <_printf_common+0x96>
 8002a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a80:	1e13      	subs	r3, r2, #0
 8002a82:	6822      	ldr	r2, [r4, #0]
 8002a84:	bf18      	it	ne
 8002a86:	2301      	movne	r3, #1
 8002a88:	0692      	lsls	r2, r2, #26
 8002a8a:	d42b      	bmi.n	8002ae4 <_printf_common+0xb0>
 8002a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a90:	4649      	mov	r1, r9
 8002a92:	4638      	mov	r0, r7
 8002a94:	47c0      	blx	r8
 8002a96:	3001      	adds	r0, #1
 8002a98:	d01e      	beq.n	8002ad8 <_printf_common+0xa4>
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	68e5      	ldr	r5, [r4, #12]
 8002a9e:	6832      	ldr	r2, [r6, #0]
 8002aa0:	f003 0306 	and.w	r3, r3, #6
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	bf08      	it	eq
 8002aa8:	1aad      	subeq	r5, r5, r2
 8002aaa:	68a3      	ldr	r3, [r4, #8]
 8002aac:	6922      	ldr	r2, [r4, #16]
 8002aae:	bf0c      	ite	eq
 8002ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ab4:	2500      	movne	r5, #0
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	bfc4      	itt	gt
 8002aba:	1a9b      	subgt	r3, r3, r2
 8002abc:	18ed      	addgt	r5, r5, r3
 8002abe:	2600      	movs	r6, #0
 8002ac0:	341a      	adds	r4, #26
 8002ac2:	42b5      	cmp	r5, r6
 8002ac4:	d11a      	bne.n	8002afc <_printf_common+0xc8>
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	e008      	b.n	8002adc <_printf_common+0xa8>
 8002aca:	2301      	movs	r3, #1
 8002acc:	4652      	mov	r2, sl
 8002ace:	4649      	mov	r1, r9
 8002ad0:	4638      	mov	r0, r7
 8002ad2:	47c0      	blx	r8
 8002ad4:	3001      	adds	r0, #1
 8002ad6:	d103      	bne.n	8002ae0 <_printf_common+0xac>
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ae0:	3501      	adds	r5, #1
 8002ae2:	e7c6      	b.n	8002a72 <_printf_common+0x3e>
 8002ae4:	18e1      	adds	r1, r4, r3
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	2030      	movs	r0, #48	; 0x30
 8002aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aee:	4422      	add	r2, r4
 8002af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002af4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002af8:	3302      	adds	r3, #2
 8002afa:	e7c7      	b.n	8002a8c <_printf_common+0x58>
 8002afc:	2301      	movs	r3, #1
 8002afe:	4622      	mov	r2, r4
 8002b00:	4649      	mov	r1, r9
 8002b02:	4638      	mov	r0, r7
 8002b04:	47c0      	blx	r8
 8002b06:	3001      	adds	r0, #1
 8002b08:	d0e6      	beq.n	8002ad8 <_printf_common+0xa4>
 8002b0a:	3601      	adds	r6, #1
 8002b0c:	e7d9      	b.n	8002ac2 <_printf_common+0x8e>
	...

08002b10 <_printf_i>:
 8002b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b14:	460c      	mov	r4, r1
 8002b16:	4691      	mov	r9, r2
 8002b18:	7e27      	ldrb	r7, [r4, #24]
 8002b1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002b1c:	2f78      	cmp	r7, #120	; 0x78
 8002b1e:	4680      	mov	r8, r0
 8002b20:	469a      	mov	sl, r3
 8002b22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b26:	d807      	bhi.n	8002b38 <_printf_i+0x28>
 8002b28:	2f62      	cmp	r7, #98	; 0x62
 8002b2a:	d80a      	bhi.n	8002b42 <_printf_i+0x32>
 8002b2c:	2f00      	cmp	r7, #0
 8002b2e:	f000 80d8 	beq.w	8002ce2 <_printf_i+0x1d2>
 8002b32:	2f58      	cmp	r7, #88	; 0x58
 8002b34:	f000 80a3 	beq.w	8002c7e <_printf_i+0x16e>
 8002b38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b40:	e03a      	b.n	8002bb8 <_printf_i+0xa8>
 8002b42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b46:	2b15      	cmp	r3, #21
 8002b48:	d8f6      	bhi.n	8002b38 <_printf_i+0x28>
 8002b4a:	a001      	add	r0, pc, #4	; (adr r0, 8002b50 <_printf_i+0x40>)
 8002b4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002b50:	08002ba9 	.word	0x08002ba9
 8002b54:	08002bbd 	.word	0x08002bbd
 8002b58:	08002b39 	.word	0x08002b39
 8002b5c:	08002b39 	.word	0x08002b39
 8002b60:	08002b39 	.word	0x08002b39
 8002b64:	08002b39 	.word	0x08002b39
 8002b68:	08002bbd 	.word	0x08002bbd
 8002b6c:	08002b39 	.word	0x08002b39
 8002b70:	08002b39 	.word	0x08002b39
 8002b74:	08002b39 	.word	0x08002b39
 8002b78:	08002b39 	.word	0x08002b39
 8002b7c:	08002cc9 	.word	0x08002cc9
 8002b80:	08002bed 	.word	0x08002bed
 8002b84:	08002cab 	.word	0x08002cab
 8002b88:	08002b39 	.word	0x08002b39
 8002b8c:	08002b39 	.word	0x08002b39
 8002b90:	08002ceb 	.word	0x08002ceb
 8002b94:	08002b39 	.word	0x08002b39
 8002b98:	08002bed 	.word	0x08002bed
 8002b9c:	08002b39 	.word	0x08002b39
 8002ba0:	08002b39 	.word	0x08002b39
 8002ba4:	08002cb3 	.word	0x08002cb3
 8002ba8:	680b      	ldr	r3, [r1, #0]
 8002baa:	1d1a      	adds	r2, r3, #4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	600a      	str	r2, [r1, #0]
 8002bb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0a3      	b.n	8002d04 <_printf_i+0x1f4>
 8002bbc:	6825      	ldr	r5, [r4, #0]
 8002bbe:	6808      	ldr	r0, [r1, #0]
 8002bc0:	062e      	lsls	r6, r5, #24
 8002bc2:	f100 0304 	add.w	r3, r0, #4
 8002bc6:	d50a      	bpl.n	8002bde <_printf_i+0xce>
 8002bc8:	6805      	ldr	r5, [r0, #0]
 8002bca:	600b      	str	r3, [r1, #0]
 8002bcc:	2d00      	cmp	r5, #0
 8002bce:	da03      	bge.n	8002bd8 <_printf_i+0xc8>
 8002bd0:	232d      	movs	r3, #45	; 0x2d
 8002bd2:	426d      	negs	r5, r5
 8002bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bd8:	485e      	ldr	r0, [pc, #376]	; (8002d54 <_printf_i+0x244>)
 8002bda:	230a      	movs	r3, #10
 8002bdc:	e019      	b.n	8002c12 <_printf_i+0x102>
 8002bde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002be2:	6805      	ldr	r5, [r0, #0]
 8002be4:	600b      	str	r3, [r1, #0]
 8002be6:	bf18      	it	ne
 8002be8:	b22d      	sxthne	r5, r5
 8002bea:	e7ef      	b.n	8002bcc <_printf_i+0xbc>
 8002bec:	680b      	ldr	r3, [r1, #0]
 8002bee:	6825      	ldr	r5, [r4, #0]
 8002bf0:	1d18      	adds	r0, r3, #4
 8002bf2:	6008      	str	r0, [r1, #0]
 8002bf4:	0628      	lsls	r0, r5, #24
 8002bf6:	d501      	bpl.n	8002bfc <_printf_i+0xec>
 8002bf8:	681d      	ldr	r5, [r3, #0]
 8002bfa:	e002      	b.n	8002c02 <_printf_i+0xf2>
 8002bfc:	0669      	lsls	r1, r5, #25
 8002bfe:	d5fb      	bpl.n	8002bf8 <_printf_i+0xe8>
 8002c00:	881d      	ldrh	r5, [r3, #0]
 8002c02:	4854      	ldr	r0, [pc, #336]	; (8002d54 <_printf_i+0x244>)
 8002c04:	2f6f      	cmp	r7, #111	; 0x6f
 8002c06:	bf0c      	ite	eq
 8002c08:	2308      	moveq	r3, #8
 8002c0a:	230a      	movne	r3, #10
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c12:	6866      	ldr	r6, [r4, #4]
 8002c14:	60a6      	str	r6, [r4, #8]
 8002c16:	2e00      	cmp	r6, #0
 8002c18:	bfa2      	ittt	ge
 8002c1a:	6821      	ldrge	r1, [r4, #0]
 8002c1c:	f021 0104 	bicge.w	r1, r1, #4
 8002c20:	6021      	strge	r1, [r4, #0]
 8002c22:	b90d      	cbnz	r5, 8002c28 <_printf_i+0x118>
 8002c24:	2e00      	cmp	r6, #0
 8002c26:	d04d      	beq.n	8002cc4 <_printf_i+0x1b4>
 8002c28:	4616      	mov	r6, r2
 8002c2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c2e:	fb03 5711 	mls	r7, r3, r1, r5
 8002c32:	5dc7      	ldrb	r7, [r0, r7]
 8002c34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c38:	462f      	mov	r7, r5
 8002c3a:	42bb      	cmp	r3, r7
 8002c3c:	460d      	mov	r5, r1
 8002c3e:	d9f4      	bls.n	8002c2a <_printf_i+0x11a>
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d10b      	bne.n	8002c5c <_printf_i+0x14c>
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	07df      	lsls	r7, r3, #31
 8002c48:	d508      	bpl.n	8002c5c <_printf_i+0x14c>
 8002c4a:	6923      	ldr	r3, [r4, #16]
 8002c4c:	6861      	ldr	r1, [r4, #4]
 8002c4e:	4299      	cmp	r1, r3
 8002c50:	bfde      	ittt	le
 8002c52:	2330      	movle	r3, #48	; 0x30
 8002c54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c5c:	1b92      	subs	r2, r2, r6
 8002c5e:	6122      	str	r2, [r4, #16]
 8002c60:	f8cd a000 	str.w	sl, [sp]
 8002c64:	464b      	mov	r3, r9
 8002c66:	aa03      	add	r2, sp, #12
 8002c68:	4621      	mov	r1, r4
 8002c6a:	4640      	mov	r0, r8
 8002c6c:	f7ff fee2 	bl	8002a34 <_printf_common>
 8002c70:	3001      	adds	r0, #1
 8002c72:	d14c      	bne.n	8002d0e <_printf_i+0x1fe>
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295
 8002c78:	b004      	add	sp, #16
 8002c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c7e:	4835      	ldr	r0, [pc, #212]	; (8002d54 <_printf_i+0x244>)
 8002c80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	680e      	ldr	r6, [r1, #0]
 8002c88:	061f      	lsls	r7, r3, #24
 8002c8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002c8e:	600e      	str	r6, [r1, #0]
 8002c90:	d514      	bpl.n	8002cbc <_printf_i+0x1ac>
 8002c92:	07d9      	lsls	r1, r3, #31
 8002c94:	bf44      	itt	mi
 8002c96:	f043 0320 	orrmi.w	r3, r3, #32
 8002c9a:	6023      	strmi	r3, [r4, #0]
 8002c9c:	b91d      	cbnz	r5, 8002ca6 <_printf_i+0x196>
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	f023 0320 	bic.w	r3, r3, #32
 8002ca4:	6023      	str	r3, [r4, #0]
 8002ca6:	2310      	movs	r3, #16
 8002ca8:	e7b0      	b.n	8002c0c <_printf_i+0xfc>
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	f043 0320 	orr.w	r3, r3, #32
 8002cb0:	6023      	str	r3, [r4, #0]
 8002cb2:	2378      	movs	r3, #120	; 0x78
 8002cb4:	4828      	ldr	r0, [pc, #160]	; (8002d58 <_printf_i+0x248>)
 8002cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002cba:	e7e3      	b.n	8002c84 <_printf_i+0x174>
 8002cbc:	065e      	lsls	r6, r3, #25
 8002cbe:	bf48      	it	mi
 8002cc0:	b2ad      	uxthmi	r5, r5
 8002cc2:	e7e6      	b.n	8002c92 <_printf_i+0x182>
 8002cc4:	4616      	mov	r6, r2
 8002cc6:	e7bb      	b.n	8002c40 <_printf_i+0x130>
 8002cc8:	680b      	ldr	r3, [r1, #0]
 8002cca:	6826      	ldr	r6, [r4, #0]
 8002ccc:	6960      	ldr	r0, [r4, #20]
 8002cce:	1d1d      	adds	r5, r3, #4
 8002cd0:	600d      	str	r5, [r1, #0]
 8002cd2:	0635      	lsls	r5, r6, #24
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	d501      	bpl.n	8002cdc <_printf_i+0x1cc>
 8002cd8:	6018      	str	r0, [r3, #0]
 8002cda:	e002      	b.n	8002ce2 <_printf_i+0x1d2>
 8002cdc:	0671      	lsls	r1, r6, #25
 8002cde:	d5fb      	bpl.n	8002cd8 <_printf_i+0x1c8>
 8002ce0:	8018      	strh	r0, [r3, #0]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	6123      	str	r3, [r4, #16]
 8002ce6:	4616      	mov	r6, r2
 8002ce8:	e7ba      	b.n	8002c60 <_printf_i+0x150>
 8002cea:	680b      	ldr	r3, [r1, #0]
 8002cec:	1d1a      	adds	r2, r3, #4
 8002cee:	600a      	str	r2, [r1, #0]
 8002cf0:	681e      	ldr	r6, [r3, #0]
 8002cf2:	6862      	ldr	r2, [r4, #4]
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4630      	mov	r0, r6
 8002cf8:	f7fd fa6a 	bl	80001d0 <memchr>
 8002cfc:	b108      	cbz	r0, 8002d02 <_printf_i+0x1f2>
 8002cfe:	1b80      	subs	r0, r0, r6
 8002d00:	6060      	str	r0, [r4, #4]
 8002d02:	6863      	ldr	r3, [r4, #4]
 8002d04:	6123      	str	r3, [r4, #16]
 8002d06:	2300      	movs	r3, #0
 8002d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d0c:	e7a8      	b.n	8002c60 <_printf_i+0x150>
 8002d0e:	6923      	ldr	r3, [r4, #16]
 8002d10:	4632      	mov	r2, r6
 8002d12:	4649      	mov	r1, r9
 8002d14:	4640      	mov	r0, r8
 8002d16:	47d0      	blx	sl
 8002d18:	3001      	adds	r0, #1
 8002d1a:	d0ab      	beq.n	8002c74 <_printf_i+0x164>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	079b      	lsls	r3, r3, #30
 8002d20:	d413      	bmi.n	8002d4a <_printf_i+0x23a>
 8002d22:	68e0      	ldr	r0, [r4, #12]
 8002d24:	9b03      	ldr	r3, [sp, #12]
 8002d26:	4298      	cmp	r0, r3
 8002d28:	bfb8      	it	lt
 8002d2a:	4618      	movlt	r0, r3
 8002d2c:	e7a4      	b.n	8002c78 <_printf_i+0x168>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	4632      	mov	r2, r6
 8002d32:	4649      	mov	r1, r9
 8002d34:	4640      	mov	r0, r8
 8002d36:	47d0      	blx	sl
 8002d38:	3001      	adds	r0, #1
 8002d3a:	d09b      	beq.n	8002c74 <_printf_i+0x164>
 8002d3c:	3501      	adds	r5, #1
 8002d3e:	68e3      	ldr	r3, [r4, #12]
 8002d40:	9903      	ldr	r1, [sp, #12]
 8002d42:	1a5b      	subs	r3, r3, r1
 8002d44:	42ab      	cmp	r3, r5
 8002d46:	dcf2      	bgt.n	8002d2e <_printf_i+0x21e>
 8002d48:	e7eb      	b.n	8002d22 <_printf_i+0x212>
 8002d4a:	2500      	movs	r5, #0
 8002d4c:	f104 0619 	add.w	r6, r4, #25
 8002d50:	e7f5      	b.n	8002d3e <_printf_i+0x22e>
 8002d52:	bf00      	nop
 8002d54:	0800362f 	.word	0x0800362f
 8002d58:	08003640 	.word	0x08003640

08002d5c <_sbrk_r>:
 8002d5c:	b538      	push	{r3, r4, r5, lr}
 8002d5e:	4d06      	ldr	r5, [pc, #24]	; (8002d78 <_sbrk_r+0x1c>)
 8002d60:	2300      	movs	r3, #0
 8002d62:	4604      	mov	r4, r0
 8002d64:	4608      	mov	r0, r1
 8002d66:	602b      	str	r3, [r5, #0]
 8002d68:	f7fe fb5c 	bl	8001424 <_sbrk>
 8002d6c:	1c43      	adds	r3, r0, #1
 8002d6e:	d102      	bne.n	8002d76 <_sbrk_r+0x1a>
 8002d70:	682b      	ldr	r3, [r5, #0]
 8002d72:	b103      	cbz	r3, 8002d76 <_sbrk_r+0x1a>
 8002d74:	6023      	str	r3, [r4, #0]
 8002d76:	bd38      	pop	{r3, r4, r5, pc}
 8002d78:	200000d4 	.word	0x200000d4

08002d7c <__swbuf_r>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	460e      	mov	r6, r1
 8002d80:	4614      	mov	r4, r2
 8002d82:	4605      	mov	r5, r0
 8002d84:	b118      	cbz	r0, 8002d8e <__swbuf_r+0x12>
 8002d86:	6983      	ldr	r3, [r0, #24]
 8002d88:	b90b      	cbnz	r3, 8002d8e <__swbuf_r+0x12>
 8002d8a:	f000 f9d9 	bl	8003140 <__sinit>
 8002d8e:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <__swbuf_r+0x98>)
 8002d90:	429c      	cmp	r4, r3
 8002d92:	d12b      	bne.n	8002dec <__swbuf_r+0x70>
 8002d94:	686c      	ldr	r4, [r5, #4]
 8002d96:	69a3      	ldr	r3, [r4, #24]
 8002d98:	60a3      	str	r3, [r4, #8]
 8002d9a:	89a3      	ldrh	r3, [r4, #12]
 8002d9c:	071a      	lsls	r2, r3, #28
 8002d9e:	d52f      	bpl.n	8002e00 <__swbuf_r+0x84>
 8002da0:	6923      	ldr	r3, [r4, #16]
 8002da2:	b36b      	cbz	r3, 8002e00 <__swbuf_r+0x84>
 8002da4:	6923      	ldr	r3, [r4, #16]
 8002da6:	6820      	ldr	r0, [r4, #0]
 8002da8:	1ac0      	subs	r0, r0, r3
 8002daa:	6963      	ldr	r3, [r4, #20]
 8002dac:	b2f6      	uxtb	r6, r6
 8002dae:	4283      	cmp	r3, r0
 8002db0:	4637      	mov	r7, r6
 8002db2:	dc04      	bgt.n	8002dbe <__swbuf_r+0x42>
 8002db4:	4621      	mov	r1, r4
 8002db6:	4628      	mov	r0, r5
 8002db8:	f000 f92e 	bl	8003018 <_fflush_r>
 8002dbc:	bb30      	cbnz	r0, 8002e0c <__swbuf_r+0x90>
 8002dbe:	68a3      	ldr	r3, [r4, #8]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	60a3      	str	r3, [r4, #8]
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	6022      	str	r2, [r4, #0]
 8002dca:	701e      	strb	r6, [r3, #0]
 8002dcc:	6963      	ldr	r3, [r4, #20]
 8002dce:	3001      	adds	r0, #1
 8002dd0:	4283      	cmp	r3, r0
 8002dd2:	d004      	beq.n	8002dde <__swbuf_r+0x62>
 8002dd4:	89a3      	ldrh	r3, [r4, #12]
 8002dd6:	07db      	lsls	r3, r3, #31
 8002dd8:	d506      	bpl.n	8002de8 <__swbuf_r+0x6c>
 8002dda:	2e0a      	cmp	r6, #10
 8002ddc:	d104      	bne.n	8002de8 <__swbuf_r+0x6c>
 8002dde:	4621      	mov	r1, r4
 8002de0:	4628      	mov	r0, r5
 8002de2:	f000 f919 	bl	8003018 <_fflush_r>
 8002de6:	b988      	cbnz	r0, 8002e0c <__swbuf_r+0x90>
 8002de8:	4638      	mov	r0, r7
 8002dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <__swbuf_r+0x9c>)
 8002dee:	429c      	cmp	r4, r3
 8002df0:	d101      	bne.n	8002df6 <__swbuf_r+0x7a>
 8002df2:	68ac      	ldr	r4, [r5, #8]
 8002df4:	e7cf      	b.n	8002d96 <__swbuf_r+0x1a>
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <__swbuf_r+0xa0>)
 8002df8:	429c      	cmp	r4, r3
 8002dfa:	bf08      	it	eq
 8002dfc:	68ec      	ldreq	r4, [r5, #12]
 8002dfe:	e7ca      	b.n	8002d96 <__swbuf_r+0x1a>
 8002e00:	4621      	mov	r1, r4
 8002e02:	4628      	mov	r0, r5
 8002e04:	f000 f80c 	bl	8002e20 <__swsetup_r>
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d0cb      	beq.n	8002da4 <__swbuf_r+0x28>
 8002e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8002e10:	e7ea      	b.n	8002de8 <__swbuf_r+0x6c>
 8002e12:	bf00      	nop
 8002e14:	08003674 	.word	0x08003674
 8002e18:	08003694 	.word	0x08003694
 8002e1c:	08003654 	.word	0x08003654

08002e20 <__swsetup_r>:
 8002e20:	4b32      	ldr	r3, [pc, #200]	; (8002eec <__swsetup_r+0xcc>)
 8002e22:	b570      	push	{r4, r5, r6, lr}
 8002e24:	681d      	ldr	r5, [r3, #0]
 8002e26:	4606      	mov	r6, r0
 8002e28:	460c      	mov	r4, r1
 8002e2a:	b125      	cbz	r5, 8002e36 <__swsetup_r+0x16>
 8002e2c:	69ab      	ldr	r3, [r5, #24]
 8002e2e:	b913      	cbnz	r3, 8002e36 <__swsetup_r+0x16>
 8002e30:	4628      	mov	r0, r5
 8002e32:	f000 f985 	bl	8003140 <__sinit>
 8002e36:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <__swsetup_r+0xd0>)
 8002e38:	429c      	cmp	r4, r3
 8002e3a:	d10f      	bne.n	8002e5c <__swsetup_r+0x3c>
 8002e3c:	686c      	ldr	r4, [r5, #4]
 8002e3e:	89a3      	ldrh	r3, [r4, #12]
 8002e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e44:	0719      	lsls	r1, r3, #28
 8002e46:	d42c      	bmi.n	8002ea2 <__swsetup_r+0x82>
 8002e48:	06dd      	lsls	r5, r3, #27
 8002e4a:	d411      	bmi.n	8002e70 <__swsetup_r+0x50>
 8002e4c:	2309      	movs	r3, #9
 8002e4e:	6033      	str	r3, [r6, #0]
 8002e50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e54:	81a3      	strh	r3, [r4, #12]
 8002e56:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5a:	e03e      	b.n	8002eda <__swsetup_r+0xba>
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <__swsetup_r+0xd4>)
 8002e5e:	429c      	cmp	r4, r3
 8002e60:	d101      	bne.n	8002e66 <__swsetup_r+0x46>
 8002e62:	68ac      	ldr	r4, [r5, #8]
 8002e64:	e7eb      	b.n	8002e3e <__swsetup_r+0x1e>
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <__swsetup_r+0xd8>)
 8002e68:	429c      	cmp	r4, r3
 8002e6a:	bf08      	it	eq
 8002e6c:	68ec      	ldreq	r4, [r5, #12]
 8002e6e:	e7e6      	b.n	8002e3e <__swsetup_r+0x1e>
 8002e70:	0758      	lsls	r0, r3, #29
 8002e72:	d512      	bpl.n	8002e9a <__swsetup_r+0x7a>
 8002e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e76:	b141      	cbz	r1, 8002e8a <__swsetup_r+0x6a>
 8002e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e7c:	4299      	cmp	r1, r3
 8002e7e:	d002      	beq.n	8002e86 <__swsetup_r+0x66>
 8002e80:	4630      	mov	r0, r6
 8002e82:	f7ff fbd3 	bl	800262c <_free_r>
 8002e86:	2300      	movs	r3, #0
 8002e88:	6363      	str	r3, [r4, #52]	; 0x34
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	2300      	movs	r3, #0
 8002e94:	6063      	str	r3, [r4, #4]
 8002e96:	6923      	ldr	r3, [r4, #16]
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	89a3      	ldrh	r3, [r4, #12]
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	81a3      	strh	r3, [r4, #12]
 8002ea2:	6923      	ldr	r3, [r4, #16]
 8002ea4:	b94b      	cbnz	r3, 8002eba <__swsetup_r+0x9a>
 8002ea6:	89a3      	ldrh	r3, [r4, #12]
 8002ea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb0:	d003      	beq.n	8002eba <__swsetup_r+0x9a>
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	f000 fa07 	bl	80032c8 <__smakebuf_r>
 8002eba:	89a0      	ldrh	r0, [r4, #12]
 8002ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ec0:	f010 0301 	ands.w	r3, r0, #1
 8002ec4:	d00a      	beq.n	8002edc <__swsetup_r+0xbc>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60a3      	str	r3, [r4, #8]
 8002eca:	6963      	ldr	r3, [r4, #20]
 8002ecc:	425b      	negs	r3, r3
 8002ece:	61a3      	str	r3, [r4, #24]
 8002ed0:	6923      	ldr	r3, [r4, #16]
 8002ed2:	b943      	cbnz	r3, 8002ee6 <__swsetup_r+0xc6>
 8002ed4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ed8:	d1ba      	bne.n	8002e50 <__swsetup_r+0x30>
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	0781      	lsls	r1, r0, #30
 8002ede:	bf58      	it	pl
 8002ee0:	6963      	ldrpl	r3, [r4, #20]
 8002ee2:	60a3      	str	r3, [r4, #8]
 8002ee4:	e7f4      	b.n	8002ed0 <__swsetup_r+0xb0>
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	e7f7      	b.n	8002eda <__swsetup_r+0xba>
 8002eea:	bf00      	nop
 8002eec:	2000000c 	.word	0x2000000c
 8002ef0:	08003674 	.word	0x08003674
 8002ef4:	08003694 	.word	0x08003694
 8002ef8:	08003654 	.word	0x08003654

08002efc <abort>:
 8002efc:	b508      	push	{r3, lr}
 8002efe:	2006      	movs	r0, #6
 8002f00:	f000 fa56 	bl	80033b0 <raise>
 8002f04:	2001      	movs	r0, #1
 8002f06:	f7fe fa16 	bl	8001336 <_exit>
	...

08002f0c <__sflush_r>:
 8002f0c:	898a      	ldrh	r2, [r1, #12]
 8002f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f12:	4605      	mov	r5, r0
 8002f14:	0710      	lsls	r0, r2, #28
 8002f16:	460c      	mov	r4, r1
 8002f18:	d458      	bmi.n	8002fcc <__sflush_r+0xc0>
 8002f1a:	684b      	ldr	r3, [r1, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	dc05      	bgt.n	8002f2c <__sflush_r+0x20>
 8002f20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	dc02      	bgt.n	8002f2c <__sflush_r+0x20>
 8002f26:	2000      	movs	r0, #0
 8002f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f2e:	2e00      	cmp	r6, #0
 8002f30:	d0f9      	beq.n	8002f26 <__sflush_r+0x1a>
 8002f32:	2300      	movs	r3, #0
 8002f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f38:	682f      	ldr	r7, [r5, #0]
 8002f3a:	602b      	str	r3, [r5, #0]
 8002f3c:	d032      	beq.n	8002fa4 <__sflush_r+0x98>
 8002f3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f40:	89a3      	ldrh	r3, [r4, #12]
 8002f42:	075a      	lsls	r2, r3, #29
 8002f44:	d505      	bpl.n	8002f52 <__sflush_r+0x46>
 8002f46:	6863      	ldr	r3, [r4, #4]
 8002f48:	1ac0      	subs	r0, r0, r3
 8002f4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f4c:	b10b      	cbz	r3, 8002f52 <__sflush_r+0x46>
 8002f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f50:	1ac0      	subs	r0, r0, r3
 8002f52:	2300      	movs	r3, #0
 8002f54:	4602      	mov	r2, r0
 8002f56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f58:	6a21      	ldr	r1, [r4, #32]
 8002f5a:	4628      	mov	r0, r5
 8002f5c:	47b0      	blx	r6
 8002f5e:	1c43      	adds	r3, r0, #1
 8002f60:	89a3      	ldrh	r3, [r4, #12]
 8002f62:	d106      	bne.n	8002f72 <__sflush_r+0x66>
 8002f64:	6829      	ldr	r1, [r5, #0]
 8002f66:	291d      	cmp	r1, #29
 8002f68:	d82c      	bhi.n	8002fc4 <__sflush_r+0xb8>
 8002f6a:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <__sflush_r+0x108>)
 8002f6c:	40ca      	lsrs	r2, r1
 8002f6e:	07d6      	lsls	r6, r2, #31
 8002f70:	d528      	bpl.n	8002fc4 <__sflush_r+0xb8>
 8002f72:	2200      	movs	r2, #0
 8002f74:	6062      	str	r2, [r4, #4]
 8002f76:	04d9      	lsls	r1, r3, #19
 8002f78:	6922      	ldr	r2, [r4, #16]
 8002f7a:	6022      	str	r2, [r4, #0]
 8002f7c:	d504      	bpl.n	8002f88 <__sflush_r+0x7c>
 8002f7e:	1c42      	adds	r2, r0, #1
 8002f80:	d101      	bne.n	8002f86 <__sflush_r+0x7a>
 8002f82:	682b      	ldr	r3, [r5, #0]
 8002f84:	b903      	cbnz	r3, 8002f88 <__sflush_r+0x7c>
 8002f86:	6560      	str	r0, [r4, #84]	; 0x54
 8002f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f8a:	602f      	str	r7, [r5, #0]
 8002f8c:	2900      	cmp	r1, #0
 8002f8e:	d0ca      	beq.n	8002f26 <__sflush_r+0x1a>
 8002f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f94:	4299      	cmp	r1, r3
 8002f96:	d002      	beq.n	8002f9e <__sflush_r+0x92>
 8002f98:	4628      	mov	r0, r5
 8002f9a:	f7ff fb47 	bl	800262c <_free_r>
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	6360      	str	r0, [r4, #52]	; 0x34
 8002fa2:	e7c1      	b.n	8002f28 <__sflush_r+0x1c>
 8002fa4:	6a21      	ldr	r1, [r4, #32]
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	4628      	mov	r0, r5
 8002faa:	47b0      	blx	r6
 8002fac:	1c41      	adds	r1, r0, #1
 8002fae:	d1c7      	bne.n	8002f40 <__sflush_r+0x34>
 8002fb0:	682b      	ldr	r3, [r5, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0c4      	beq.n	8002f40 <__sflush_r+0x34>
 8002fb6:	2b1d      	cmp	r3, #29
 8002fb8:	d001      	beq.n	8002fbe <__sflush_r+0xb2>
 8002fba:	2b16      	cmp	r3, #22
 8002fbc:	d101      	bne.n	8002fc2 <__sflush_r+0xb6>
 8002fbe:	602f      	str	r7, [r5, #0]
 8002fc0:	e7b1      	b.n	8002f26 <__sflush_r+0x1a>
 8002fc2:	89a3      	ldrh	r3, [r4, #12]
 8002fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fc8:	81a3      	strh	r3, [r4, #12]
 8002fca:	e7ad      	b.n	8002f28 <__sflush_r+0x1c>
 8002fcc:	690f      	ldr	r7, [r1, #16]
 8002fce:	2f00      	cmp	r7, #0
 8002fd0:	d0a9      	beq.n	8002f26 <__sflush_r+0x1a>
 8002fd2:	0793      	lsls	r3, r2, #30
 8002fd4:	680e      	ldr	r6, [r1, #0]
 8002fd6:	bf08      	it	eq
 8002fd8:	694b      	ldreq	r3, [r1, #20]
 8002fda:	600f      	str	r7, [r1, #0]
 8002fdc:	bf18      	it	ne
 8002fde:	2300      	movne	r3, #0
 8002fe0:	eba6 0807 	sub.w	r8, r6, r7
 8002fe4:	608b      	str	r3, [r1, #8]
 8002fe6:	f1b8 0f00 	cmp.w	r8, #0
 8002fea:	dd9c      	ble.n	8002f26 <__sflush_r+0x1a>
 8002fec:	6a21      	ldr	r1, [r4, #32]
 8002fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ff0:	4643      	mov	r3, r8
 8002ff2:	463a      	mov	r2, r7
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	47b0      	blx	r6
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	dc06      	bgt.n	800300a <__sflush_r+0xfe>
 8002ffc:	89a3      	ldrh	r3, [r4, #12]
 8002ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003002:	81a3      	strh	r3, [r4, #12]
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	e78e      	b.n	8002f28 <__sflush_r+0x1c>
 800300a:	4407      	add	r7, r0
 800300c:	eba8 0800 	sub.w	r8, r8, r0
 8003010:	e7e9      	b.n	8002fe6 <__sflush_r+0xda>
 8003012:	bf00      	nop
 8003014:	20400001 	.word	0x20400001

08003018 <_fflush_r>:
 8003018:	b538      	push	{r3, r4, r5, lr}
 800301a:	690b      	ldr	r3, [r1, #16]
 800301c:	4605      	mov	r5, r0
 800301e:	460c      	mov	r4, r1
 8003020:	b913      	cbnz	r3, 8003028 <_fflush_r+0x10>
 8003022:	2500      	movs	r5, #0
 8003024:	4628      	mov	r0, r5
 8003026:	bd38      	pop	{r3, r4, r5, pc}
 8003028:	b118      	cbz	r0, 8003032 <_fflush_r+0x1a>
 800302a:	6983      	ldr	r3, [r0, #24]
 800302c:	b90b      	cbnz	r3, 8003032 <_fflush_r+0x1a>
 800302e:	f000 f887 	bl	8003140 <__sinit>
 8003032:	4b14      	ldr	r3, [pc, #80]	; (8003084 <_fflush_r+0x6c>)
 8003034:	429c      	cmp	r4, r3
 8003036:	d11b      	bne.n	8003070 <_fflush_r+0x58>
 8003038:	686c      	ldr	r4, [r5, #4]
 800303a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0ef      	beq.n	8003022 <_fflush_r+0xa>
 8003042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003044:	07d0      	lsls	r0, r2, #31
 8003046:	d404      	bmi.n	8003052 <_fflush_r+0x3a>
 8003048:	0599      	lsls	r1, r3, #22
 800304a:	d402      	bmi.n	8003052 <_fflush_r+0x3a>
 800304c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800304e:	f000 f915 	bl	800327c <__retarget_lock_acquire_recursive>
 8003052:	4628      	mov	r0, r5
 8003054:	4621      	mov	r1, r4
 8003056:	f7ff ff59 	bl	8002f0c <__sflush_r>
 800305a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800305c:	07da      	lsls	r2, r3, #31
 800305e:	4605      	mov	r5, r0
 8003060:	d4e0      	bmi.n	8003024 <_fflush_r+0xc>
 8003062:	89a3      	ldrh	r3, [r4, #12]
 8003064:	059b      	lsls	r3, r3, #22
 8003066:	d4dd      	bmi.n	8003024 <_fflush_r+0xc>
 8003068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800306a:	f000 f908 	bl	800327e <__retarget_lock_release_recursive>
 800306e:	e7d9      	b.n	8003024 <_fflush_r+0xc>
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <_fflush_r+0x70>)
 8003072:	429c      	cmp	r4, r3
 8003074:	d101      	bne.n	800307a <_fflush_r+0x62>
 8003076:	68ac      	ldr	r4, [r5, #8]
 8003078:	e7df      	b.n	800303a <_fflush_r+0x22>
 800307a:	4b04      	ldr	r3, [pc, #16]	; (800308c <_fflush_r+0x74>)
 800307c:	429c      	cmp	r4, r3
 800307e:	bf08      	it	eq
 8003080:	68ec      	ldreq	r4, [r5, #12]
 8003082:	e7da      	b.n	800303a <_fflush_r+0x22>
 8003084:	08003674 	.word	0x08003674
 8003088:	08003694 	.word	0x08003694
 800308c:	08003654 	.word	0x08003654

08003090 <std>:
 8003090:	2300      	movs	r3, #0
 8003092:	b510      	push	{r4, lr}
 8003094:	4604      	mov	r4, r0
 8003096:	e9c0 3300 	strd	r3, r3, [r0]
 800309a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800309e:	6083      	str	r3, [r0, #8]
 80030a0:	8181      	strh	r1, [r0, #12]
 80030a2:	6643      	str	r3, [r0, #100]	; 0x64
 80030a4:	81c2      	strh	r2, [r0, #14]
 80030a6:	6183      	str	r3, [r0, #24]
 80030a8:	4619      	mov	r1, r3
 80030aa:	2208      	movs	r2, #8
 80030ac:	305c      	adds	r0, #92	; 0x5c
 80030ae:	f7ff fa3d 	bl	800252c <memset>
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <std+0x38>)
 80030b4:	6263      	str	r3, [r4, #36]	; 0x24
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <std+0x3c>)
 80030b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <std+0x40>)
 80030bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <std+0x44>)
 80030c0:	6224      	str	r4, [r4, #32]
 80030c2:	6323      	str	r3, [r4, #48]	; 0x30
 80030c4:	bd10      	pop	{r4, pc}
 80030c6:	bf00      	nop
 80030c8:	080033e9 	.word	0x080033e9
 80030cc:	0800340b 	.word	0x0800340b
 80030d0:	08003443 	.word	0x08003443
 80030d4:	08003467 	.word	0x08003467

080030d8 <_cleanup_r>:
 80030d8:	4901      	ldr	r1, [pc, #4]	; (80030e0 <_cleanup_r+0x8>)
 80030da:	f000 b8af 	b.w	800323c <_fwalk_reent>
 80030de:	bf00      	nop
 80030e0:	08003019 	.word	0x08003019

080030e4 <__sfmoreglue>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	1e4a      	subs	r2, r1, #1
 80030e8:	2568      	movs	r5, #104	; 0x68
 80030ea:	4355      	muls	r5, r2
 80030ec:	460e      	mov	r6, r1
 80030ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030f2:	f7ff faeb 	bl	80026cc <_malloc_r>
 80030f6:	4604      	mov	r4, r0
 80030f8:	b140      	cbz	r0, 800310c <__sfmoreglue+0x28>
 80030fa:	2100      	movs	r1, #0
 80030fc:	e9c0 1600 	strd	r1, r6, [r0]
 8003100:	300c      	adds	r0, #12
 8003102:	60a0      	str	r0, [r4, #8]
 8003104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003108:	f7ff fa10 	bl	800252c <memset>
 800310c:	4620      	mov	r0, r4
 800310e:	bd70      	pop	{r4, r5, r6, pc}

08003110 <__sfp_lock_acquire>:
 8003110:	4801      	ldr	r0, [pc, #4]	; (8003118 <__sfp_lock_acquire+0x8>)
 8003112:	f000 b8b3 	b.w	800327c <__retarget_lock_acquire_recursive>
 8003116:	bf00      	nop
 8003118:	200000d0 	.word	0x200000d0

0800311c <__sfp_lock_release>:
 800311c:	4801      	ldr	r0, [pc, #4]	; (8003124 <__sfp_lock_release+0x8>)
 800311e:	f000 b8ae 	b.w	800327e <__retarget_lock_release_recursive>
 8003122:	bf00      	nop
 8003124:	200000d0 	.word	0x200000d0

08003128 <__sinit_lock_acquire>:
 8003128:	4801      	ldr	r0, [pc, #4]	; (8003130 <__sinit_lock_acquire+0x8>)
 800312a:	f000 b8a7 	b.w	800327c <__retarget_lock_acquire_recursive>
 800312e:	bf00      	nop
 8003130:	200000cb 	.word	0x200000cb

08003134 <__sinit_lock_release>:
 8003134:	4801      	ldr	r0, [pc, #4]	; (800313c <__sinit_lock_release+0x8>)
 8003136:	f000 b8a2 	b.w	800327e <__retarget_lock_release_recursive>
 800313a:	bf00      	nop
 800313c:	200000cb 	.word	0x200000cb

08003140 <__sinit>:
 8003140:	b510      	push	{r4, lr}
 8003142:	4604      	mov	r4, r0
 8003144:	f7ff fff0 	bl	8003128 <__sinit_lock_acquire>
 8003148:	69a3      	ldr	r3, [r4, #24]
 800314a:	b11b      	cbz	r3, 8003154 <__sinit+0x14>
 800314c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003150:	f7ff bff0 	b.w	8003134 <__sinit_lock_release>
 8003154:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003158:	6523      	str	r3, [r4, #80]	; 0x50
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <__sinit+0x68>)
 800315c:	4a13      	ldr	r2, [pc, #76]	; (80031ac <__sinit+0x6c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	62a2      	str	r2, [r4, #40]	; 0x28
 8003162:	42a3      	cmp	r3, r4
 8003164:	bf04      	itt	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	61a3      	streq	r3, [r4, #24]
 800316a:	4620      	mov	r0, r4
 800316c:	f000 f820 	bl	80031b0 <__sfp>
 8003170:	6060      	str	r0, [r4, #4]
 8003172:	4620      	mov	r0, r4
 8003174:	f000 f81c 	bl	80031b0 <__sfp>
 8003178:	60a0      	str	r0, [r4, #8]
 800317a:	4620      	mov	r0, r4
 800317c:	f000 f818 	bl	80031b0 <__sfp>
 8003180:	2200      	movs	r2, #0
 8003182:	60e0      	str	r0, [r4, #12]
 8003184:	2104      	movs	r1, #4
 8003186:	6860      	ldr	r0, [r4, #4]
 8003188:	f7ff ff82 	bl	8003090 <std>
 800318c:	68a0      	ldr	r0, [r4, #8]
 800318e:	2201      	movs	r2, #1
 8003190:	2109      	movs	r1, #9
 8003192:	f7ff ff7d 	bl	8003090 <std>
 8003196:	68e0      	ldr	r0, [r4, #12]
 8003198:	2202      	movs	r2, #2
 800319a:	2112      	movs	r1, #18
 800319c:	f7ff ff78 	bl	8003090 <std>
 80031a0:	2301      	movs	r3, #1
 80031a2:	61a3      	str	r3, [r4, #24]
 80031a4:	e7d2      	b.n	800314c <__sinit+0xc>
 80031a6:	bf00      	nop
 80031a8:	08003568 	.word	0x08003568
 80031ac:	080030d9 	.word	0x080030d9

080031b0 <__sfp>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	4607      	mov	r7, r0
 80031b4:	f7ff ffac 	bl	8003110 <__sfp_lock_acquire>
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <__sfp+0x84>)
 80031ba:	681e      	ldr	r6, [r3, #0]
 80031bc:	69b3      	ldr	r3, [r6, #24]
 80031be:	b913      	cbnz	r3, 80031c6 <__sfp+0x16>
 80031c0:	4630      	mov	r0, r6
 80031c2:	f7ff ffbd 	bl	8003140 <__sinit>
 80031c6:	3648      	adds	r6, #72	; 0x48
 80031c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	d503      	bpl.n	80031d8 <__sfp+0x28>
 80031d0:	6833      	ldr	r3, [r6, #0]
 80031d2:	b30b      	cbz	r3, 8003218 <__sfp+0x68>
 80031d4:	6836      	ldr	r6, [r6, #0]
 80031d6:	e7f7      	b.n	80031c8 <__sfp+0x18>
 80031d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031dc:	b9d5      	cbnz	r5, 8003214 <__sfp+0x64>
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <__sfp+0x88>)
 80031e0:	60e3      	str	r3, [r4, #12]
 80031e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031e6:	6665      	str	r5, [r4, #100]	; 0x64
 80031e8:	f000 f847 	bl	800327a <__retarget_lock_init_recursive>
 80031ec:	f7ff ff96 	bl	800311c <__sfp_lock_release>
 80031f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031f8:	6025      	str	r5, [r4, #0]
 80031fa:	61a5      	str	r5, [r4, #24]
 80031fc:	2208      	movs	r2, #8
 80031fe:	4629      	mov	r1, r5
 8003200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003204:	f7ff f992 	bl	800252c <memset>
 8003208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800320c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003210:	4620      	mov	r0, r4
 8003212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003214:	3468      	adds	r4, #104	; 0x68
 8003216:	e7d9      	b.n	80031cc <__sfp+0x1c>
 8003218:	2104      	movs	r1, #4
 800321a:	4638      	mov	r0, r7
 800321c:	f7ff ff62 	bl	80030e4 <__sfmoreglue>
 8003220:	4604      	mov	r4, r0
 8003222:	6030      	str	r0, [r6, #0]
 8003224:	2800      	cmp	r0, #0
 8003226:	d1d5      	bne.n	80031d4 <__sfp+0x24>
 8003228:	f7ff ff78 	bl	800311c <__sfp_lock_release>
 800322c:	230c      	movs	r3, #12
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	e7ee      	b.n	8003210 <__sfp+0x60>
 8003232:	bf00      	nop
 8003234:	08003568 	.word	0x08003568
 8003238:	ffff0001 	.word	0xffff0001

0800323c <_fwalk_reent>:
 800323c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003240:	4606      	mov	r6, r0
 8003242:	4688      	mov	r8, r1
 8003244:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003248:	2700      	movs	r7, #0
 800324a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800324e:	f1b9 0901 	subs.w	r9, r9, #1
 8003252:	d505      	bpl.n	8003260 <_fwalk_reent+0x24>
 8003254:	6824      	ldr	r4, [r4, #0]
 8003256:	2c00      	cmp	r4, #0
 8003258:	d1f7      	bne.n	800324a <_fwalk_reent+0xe>
 800325a:	4638      	mov	r0, r7
 800325c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003260:	89ab      	ldrh	r3, [r5, #12]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d907      	bls.n	8003276 <_fwalk_reent+0x3a>
 8003266:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800326a:	3301      	adds	r3, #1
 800326c:	d003      	beq.n	8003276 <_fwalk_reent+0x3a>
 800326e:	4629      	mov	r1, r5
 8003270:	4630      	mov	r0, r6
 8003272:	47c0      	blx	r8
 8003274:	4307      	orrs	r7, r0
 8003276:	3568      	adds	r5, #104	; 0x68
 8003278:	e7e9      	b.n	800324e <_fwalk_reent+0x12>

0800327a <__retarget_lock_init_recursive>:
 800327a:	4770      	bx	lr

0800327c <__retarget_lock_acquire_recursive>:
 800327c:	4770      	bx	lr

0800327e <__retarget_lock_release_recursive>:
 800327e:	4770      	bx	lr

08003280 <__swhatbuf_r>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	460e      	mov	r6, r1
 8003284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003288:	2900      	cmp	r1, #0
 800328a:	b096      	sub	sp, #88	; 0x58
 800328c:	4614      	mov	r4, r2
 800328e:	461d      	mov	r5, r3
 8003290:	da07      	bge.n	80032a2 <__swhatbuf_r+0x22>
 8003292:	2300      	movs	r3, #0
 8003294:	602b      	str	r3, [r5, #0]
 8003296:	89b3      	ldrh	r3, [r6, #12]
 8003298:	061a      	lsls	r2, r3, #24
 800329a:	d410      	bmi.n	80032be <__swhatbuf_r+0x3e>
 800329c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a0:	e00e      	b.n	80032c0 <__swhatbuf_r+0x40>
 80032a2:	466a      	mov	r2, sp
 80032a4:	f000 f906 	bl	80034b4 <_fstat_r>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	dbf2      	blt.n	8003292 <__swhatbuf_r+0x12>
 80032ac:	9a01      	ldr	r2, [sp, #4]
 80032ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032b6:	425a      	negs	r2, r3
 80032b8:	415a      	adcs	r2, r3
 80032ba:	602a      	str	r2, [r5, #0]
 80032bc:	e7ee      	b.n	800329c <__swhatbuf_r+0x1c>
 80032be:	2340      	movs	r3, #64	; 0x40
 80032c0:	2000      	movs	r0, #0
 80032c2:	6023      	str	r3, [r4, #0]
 80032c4:	b016      	add	sp, #88	; 0x58
 80032c6:	bd70      	pop	{r4, r5, r6, pc}

080032c8 <__smakebuf_r>:
 80032c8:	898b      	ldrh	r3, [r1, #12]
 80032ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032cc:	079d      	lsls	r5, r3, #30
 80032ce:	4606      	mov	r6, r0
 80032d0:	460c      	mov	r4, r1
 80032d2:	d507      	bpl.n	80032e4 <__smakebuf_r+0x1c>
 80032d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032d8:	6023      	str	r3, [r4, #0]
 80032da:	6123      	str	r3, [r4, #16]
 80032dc:	2301      	movs	r3, #1
 80032de:	6163      	str	r3, [r4, #20]
 80032e0:	b002      	add	sp, #8
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	ab01      	add	r3, sp, #4
 80032e6:	466a      	mov	r2, sp
 80032e8:	f7ff ffca 	bl	8003280 <__swhatbuf_r>
 80032ec:	9900      	ldr	r1, [sp, #0]
 80032ee:	4605      	mov	r5, r0
 80032f0:	4630      	mov	r0, r6
 80032f2:	f7ff f9eb 	bl	80026cc <_malloc_r>
 80032f6:	b948      	cbnz	r0, 800330c <__smakebuf_r+0x44>
 80032f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032fc:	059a      	lsls	r2, r3, #22
 80032fe:	d4ef      	bmi.n	80032e0 <__smakebuf_r+0x18>
 8003300:	f023 0303 	bic.w	r3, r3, #3
 8003304:	f043 0302 	orr.w	r3, r3, #2
 8003308:	81a3      	strh	r3, [r4, #12]
 800330a:	e7e3      	b.n	80032d4 <__smakebuf_r+0xc>
 800330c:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <__smakebuf_r+0x7c>)
 800330e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003310:	89a3      	ldrh	r3, [r4, #12]
 8003312:	6020      	str	r0, [r4, #0]
 8003314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003318:	81a3      	strh	r3, [r4, #12]
 800331a:	9b00      	ldr	r3, [sp, #0]
 800331c:	6163      	str	r3, [r4, #20]
 800331e:	9b01      	ldr	r3, [sp, #4]
 8003320:	6120      	str	r0, [r4, #16]
 8003322:	b15b      	cbz	r3, 800333c <__smakebuf_r+0x74>
 8003324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003328:	4630      	mov	r0, r6
 800332a:	f000 f8d5 	bl	80034d8 <_isatty_r>
 800332e:	b128      	cbz	r0, 800333c <__smakebuf_r+0x74>
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	81a3      	strh	r3, [r4, #12]
 800333c:	89a0      	ldrh	r0, [r4, #12]
 800333e:	4305      	orrs	r5, r0
 8003340:	81a5      	strh	r5, [r4, #12]
 8003342:	e7cd      	b.n	80032e0 <__smakebuf_r+0x18>
 8003344:	080030d9 	.word	0x080030d9

08003348 <__malloc_lock>:
 8003348:	4801      	ldr	r0, [pc, #4]	; (8003350 <__malloc_lock+0x8>)
 800334a:	f7ff bf97 	b.w	800327c <__retarget_lock_acquire_recursive>
 800334e:	bf00      	nop
 8003350:	200000cc 	.word	0x200000cc

08003354 <__malloc_unlock>:
 8003354:	4801      	ldr	r0, [pc, #4]	; (800335c <__malloc_unlock+0x8>)
 8003356:	f7ff bf92 	b.w	800327e <__retarget_lock_release_recursive>
 800335a:	bf00      	nop
 800335c:	200000cc 	.word	0x200000cc

08003360 <_raise_r>:
 8003360:	291f      	cmp	r1, #31
 8003362:	b538      	push	{r3, r4, r5, lr}
 8003364:	4604      	mov	r4, r0
 8003366:	460d      	mov	r5, r1
 8003368:	d904      	bls.n	8003374 <_raise_r+0x14>
 800336a:	2316      	movs	r3, #22
 800336c:	6003      	str	r3, [r0, #0]
 800336e:	f04f 30ff 	mov.w	r0, #4294967295
 8003372:	bd38      	pop	{r3, r4, r5, pc}
 8003374:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003376:	b112      	cbz	r2, 800337e <_raise_r+0x1e>
 8003378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800337c:	b94b      	cbnz	r3, 8003392 <_raise_r+0x32>
 800337e:	4620      	mov	r0, r4
 8003380:	f000 f830 	bl	80033e4 <_getpid_r>
 8003384:	462a      	mov	r2, r5
 8003386:	4601      	mov	r1, r0
 8003388:	4620      	mov	r0, r4
 800338a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800338e:	f000 b817 	b.w	80033c0 <_kill_r>
 8003392:	2b01      	cmp	r3, #1
 8003394:	d00a      	beq.n	80033ac <_raise_r+0x4c>
 8003396:	1c59      	adds	r1, r3, #1
 8003398:	d103      	bne.n	80033a2 <_raise_r+0x42>
 800339a:	2316      	movs	r3, #22
 800339c:	6003      	str	r3, [r0, #0]
 800339e:	2001      	movs	r0, #1
 80033a0:	e7e7      	b.n	8003372 <_raise_r+0x12>
 80033a2:	2400      	movs	r4, #0
 80033a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80033a8:	4628      	mov	r0, r5
 80033aa:	4798      	blx	r3
 80033ac:	2000      	movs	r0, #0
 80033ae:	e7e0      	b.n	8003372 <_raise_r+0x12>

080033b0 <raise>:
 80033b0:	4b02      	ldr	r3, [pc, #8]	; (80033bc <raise+0xc>)
 80033b2:	4601      	mov	r1, r0
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	f7ff bfd3 	b.w	8003360 <_raise_r>
 80033ba:	bf00      	nop
 80033bc:	2000000c 	.word	0x2000000c

080033c0 <_kill_r>:
 80033c0:	b538      	push	{r3, r4, r5, lr}
 80033c2:	4d07      	ldr	r5, [pc, #28]	; (80033e0 <_kill_r+0x20>)
 80033c4:	2300      	movs	r3, #0
 80033c6:	4604      	mov	r4, r0
 80033c8:	4608      	mov	r0, r1
 80033ca:	4611      	mov	r1, r2
 80033cc:	602b      	str	r3, [r5, #0]
 80033ce:	f7fd ffa2 	bl	8001316 <_kill>
 80033d2:	1c43      	adds	r3, r0, #1
 80033d4:	d102      	bne.n	80033dc <_kill_r+0x1c>
 80033d6:	682b      	ldr	r3, [r5, #0]
 80033d8:	b103      	cbz	r3, 80033dc <_kill_r+0x1c>
 80033da:	6023      	str	r3, [r4, #0]
 80033dc:	bd38      	pop	{r3, r4, r5, pc}
 80033de:	bf00      	nop
 80033e0:	200000d4 	.word	0x200000d4

080033e4 <_getpid_r>:
 80033e4:	f7fd bf8f 	b.w	8001306 <_getpid>

080033e8 <__sread>:
 80033e8:	b510      	push	{r4, lr}
 80033ea:	460c      	mov	r4, r1
 80033ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033f0:	f000 f894 	bl	800351c <_read_r>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	bfab      	itete	ge
 80033f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80033fa:	89a3      	ldrhlt	r3, [r4, #12]
 80033fc:	181b      	addge	r3, r3, r0
 80033fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003402:	bfac      	ite	ge
 8003404:	6563      	strge	r3, [r4, #84]	; 0x54
 8003406:	81a3      	strhlt	r3, [r4, #12]
 8003408:	bd10      	pop	{r4, pc}

0800340a <__swrite>:
 800340a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800340e:	461f      	mov	r7, r3
 8003410:	898b      	ldrh	r3, [r1, #12]
 8003412:	05db      	lsls	r3, r3, #23
 8003414:	4605      	mov	r5, r0
 8003416:	460c      	mov	r4, r1
 8003418:	4616      	mov	r6, r2
 800341a:	d505      	bpl.n	8003428 <__swrite+0x1e>
 800341c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003420:	2302      	movs	r3, #2
 8003422:	2200      	movs	r2, #0
 8003424:	f000 f868 	bl	80034f8 <_lseek_r>
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800342e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003432:	81a3      	strh	r3, [r4, #12]
 8003434:	4632      	mov	r2, r6
 8003436:	463b      	mov	r3, r7
 8003438:	4628      	mov	r0, r5
 800343a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800343e:	f000 b817 	b.w	8003470 <_write_r>

08003442 <__sseek>:
 8003442:	b510      	push	{r4, lr}
 8003444:	460c      	mov	r4, r1
 8003446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800344a:	f000 f855 	bl	80034f8 <_lseek_r>
 800344e:	1c43      	adds	r3, r0, #1
 8003450:	89a3      	ldrh	r3, [r4, #12]
 8003452:	bf15      	itete	ne
 8003454:	6560      	strne	r0, [r4, #84]	; 0x54
 8003456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800345a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800345e:	81a3      	strheq	r3, [r4, #12]
 8003460:	bf18      	it	ne
 8003462:	81a3      	strhne	r3, [r4, #12]
 8003464:	bd10      	pop	{r4, pc}

08003466 <__sclose>:
 8003466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800346a:	f000 b813 	b.w	8003494 <_close_r>
	...

08003470 <_write_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	4d07      	ldr	r5, [pc, #28]	; (8003490 <_write_r+0x20>)
 8003474:	4604      	mov	r4, r0
 8003476:	4608      	mov	r0, r1
 8003478:	4611      	mov	r1, r2
 800347a:	2200      	movs	r2, #0
 800347c:	602a      	str	r2, [r5, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	f7fd ff80 	bl	8001384 <_write>
 8003484:	1c43      	adds	r3, r0, #1
 8003486:	d102      	bne.n	800348e <_write_r+0x1e>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	b103      	cbz	r3, 800348e <_write_r+0x1e>
 800348c:	6023      	str	r3, [r4, #0]
 800348e:	bd38      	pop	{r3, r4, r5, pc}
 8003490:	200000d4 	.word	0x200000d4

08003494 <_close_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	4d06      	ldr	r5, [pc, #24]	; (80034b0 <_close_r+0x1c>)
 8003498:	2300      	movs	r3, #0
 800349a:	4604      	mov	r4, r0
 800349c:	4608      	mov	r0, r1
 800349e:	602b      	str	r3, [r5, #0]
 80034a0:	f7fd ff8c 	bl	80013bc <_close>
 80034a4:	1c43      	adds	r3, r0, #1
 80034a6:	d102      	bne.n	80034ae <_close_r+0x1a>
 80034a8:	682b      	ldr	r3, [r5, #0]
 80034aa:	b103      	cbz	r3, 80034ae <_close_r+0x1a>
 80034ac:	6023      	str	r3, [r4, #0]
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
 80034b0:	200000d4 	.word	0x200000d4

080034b4 <_fstat_r>:
 80034b4:	b538      	push	{r3, r4, r5, lr}
 80034b6:	4d07      	ldr	r5, [pc, #28]	; (80034d4 <_fstat_r+0x20>)
 80034b8:	2300      	movs	r3, #0
 80034ba:	4604      	mov	r4, r0
 80034bc:	4608      	mov	r0, r1
 80034be:	4611      	mov	r1, r2
 80034c0:	602b      	str	r3, [r5, #0]
 80034c2:	f7fd ff87 	bl	80013d4 <_fstat>
 80034c6:	1c43      	adds	r3, r0, #1
 80034c8:	d102      	bne.n	80034d0 <_fstat_r+0x1c>
 80034ca:	682b      	ldr	r3, [r5, #0]
 80034cc:	b103      	cbz	r3, 80034d0 <_fstat_r+0x1c>
 80034ce:	6023      	str	r3, [r4, #0]
 80034d0:	bd38      	pop	{r3, r4, r5, pc}
 80034d2:	bf00      	nop
 80034d4:	200000d4 	.word	0x200000d4

080034d8 <_isatty_r>:
 80034d8:	b538      	push	{r3, r4, r5, lr}
 80034da:	4d06      	ldr	r5, [pc, #24]	; (80034f4 <_isatty_r+0x1c>)
 80034dc:	2300      	movs	r3, #0
 80034de:	4604      	mov	r4, r0
 80034e0:	4608      	mov	r0, r1
 80034e2:	602b      	str	r3, [r5, #0]
 80034e4:	f7fd ff86 	bl	80013f4 <_isatty>
 80034e8:	1c43      	adds	r3, r0, #1
 80034ea:	d102      	bne.n	80034f2 <_isatty_r+0x1a>
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	b103      	cbz	r3, 80034f2 <_isatty_r+0x1a>
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	bd38      	pop	{r3, r4, r5, pc}
 80034f4:	200000d4 	.word	0x200000d4

080034f8 <_lseek_r>:
 80034f8:	b538      	push	{r3, r4, r5, lr}
 80034fa:	4d07      	ldr	r5, [pc, #28]	; (8003518 <_lseek_r+0x20>)
 80034fc:	4604      	mov	r4, r0
 80034fe:	4608      	mov	r0, r1
 8003500:	4611      	mov	r1, r2
 8003502:	2200      	movs	r2, #0
 8003504:	602a      	str	r2, [r5, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	f7fd ff7f 	bl	800140a <_lseek>
 800350c:	1c43      	adds	r3, r0, #1
 800350e:	d102      	bne.n	8003516 <_lseek_r+0x1e>
 8003510:	682b      	ldr	r3, [r5, #0]
 8003512:	b103      	cbz	r3, 8003516 <_lseek_r+0x1e>
 8003514:	6023      	str	r3, [r4, #0]
 8003516:	bd38      	pop	{r3, r4, r5, pc}
 8003518:	200000d4 	.word	0x200000d4

0800351c <_read_r>:
 800351c:	b538      	push	{r3, r4, r5, lr}
 800351e:	4d07      	ldr	r5, [pc, #28]	; (800353c <_read_r+0x20>)
 8003520:	4604      	mov	r4, r0
 8003522:	4608      	mov	r0, r1
 8003524:	4611      	mov	r1, r2
 8003526:	2200      	movs	r2, #0
 8003528:	602a      	str	r2, [r5, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	f7fd ff0d 	bl	800134a <_read>
 8003530:	1c43      	adds	r3, r0, #1
 8003532:	d102      	bne.n	800353a <_read_r+0x1e>
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	b103      	cbz	r3, 800353a <_read_r+0x1e>
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	bd38      	pop	{r3, r4, r5, pc}
 800353c:	200000d4 	.word	0x200000d4

08003540 <_init>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	bf00      	nop
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr

0800354c <_fini>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr
